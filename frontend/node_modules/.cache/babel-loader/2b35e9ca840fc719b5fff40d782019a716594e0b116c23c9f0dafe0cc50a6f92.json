{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { defineComponent, computed, openBlock, createElementBlock, normalizeClass, renderSlot, unref, useSlots, ref, watch, createBlock, withCtx, withDirectives, createVNode, Fragment, renderList, mergeProps, createTextVNode, toDisplayString, createCommentVNode, vShow, normalizeProps, createElementVNode, mergeModels, useModel, onMounted, createSlots } from \"vue\";\nimport { g as get, s as set } from \"./object-DIbMZaP9.mjs\";\nimport { _ as _sfc_main$8 } from \"./BTableSimple.vue_vue_type_script_setup_true_lang-BEpZo-87.mjs\";\nimport { u as useDefaults } from \"./useDefaults-dJMhLizZ.mjs\";\nimport { t as titleCase, s as startCase } from \"./stringUtils-BCx12BQM.mjs\";\nimport { u as useToNumber } from \"./index-dpbv1toz.mjs\";\nconst formatItem = (item, fieldKey, formatter) => {\n  const val = get(item, fieldKey);\n  return formatter && typeof formatter === \"function\" ? formatter(val, fieldKey, item) : val;\n};\nconst isTableItem = value => typeof value === \"object\" && value !== null;\nconst isTableField = value => typeof value === \"object\" && value !== null && \"key\" in value;\nconst _sfc_main$7 = /* @__PURE__ */defineComponent({\n  __name: \"BTbody\",\n  props: {\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTbody\");\n    const computedClasses = computed(() => ({\n      [`thead-${props.variant}`]: props.variant !== null\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"tbody\", {\n        class: normalizeClass(computedClasses.value)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nconst _hoisted_1$3 = [\"scope\", \"colspan\", \"rowspan\", \"data-label\"];\nconst _hoisted_2$3 = {\n  key: 0\n};\nconst _sfc_main$6 = /* @__PURE__ */defineComponent({\n  __name: \"BTd\",\n  props: {\n    colspan: {\n      default: void 0\n    },\n    rowspan: {\n      default: void 0\n    },\n    stackedHeading: {\n      default: void 0\n    },\n    stickyColumn: {\n      type: Boolean,\n      default: false\n    },\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTd\");\n    const computedClasses = computed(() => ({\n      [`table-${props.variant}`]: props.variant !== null,\n      \"b-table-sticky-column\": props.stickyColumn,\n      \"table-b-table-default\": props.stickyColumn && props.variant === null\n    }));\n    const scope = computed(() => props.colspan ? \"colspan\" : props.rowspan ? \"rowspan\" : \"col\");\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"td\", {\n        scope: scope.value,\n        class: normalizeClass(computedClasses.value),\n        colspan: unref(props).colspan,\n        rowspan: unref(props).rowspan,\n        \"data-label\": unref(props).stackedHeading\n      }, [unref(props).stackedHeading ? (openBlock(), createElementBlock(\"div\", _hoisted_2$3, [renderSlot(_ctx.$slots, \"default\")])) : renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      })], 10, _hoisted_1$3);\n    };\n  }\n});\nconst _sfc_main$5 = /* @__PURE__ */defineComponent({\n  __name: \"BTfoot\",\n  props: {\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTfoot\");\n    const computedClasses = computed(() => ({\n      [`table-${props.variant}`]: props.variant !== null\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"tfoot\", {\n        class: normalizeClass(computedClasses.value)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nconst _hoisted_1$2 = [\"scope\", \"colspan\", \"rowspan\", \"data-label\"];\nconst _hoisted_2$2 = {\n  key: 0\n};\nconst _sfc_main$4 = /* @__PURE__ */defineComponent({\n  __name: \"BTh\",\n  props: {\n    colspan: {\n      default: void 0\n    },\n    rowspan: {\n      default: void 0\n    },\n    stackedHeading: {\n      default: void 0\n    },\n    stickyColumn: {\n      type: Boolean,\n      default: false\n    },\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTh\");\n    const computedClasses = computed(() => ({\n      [`table-${props.variant}`]: props.variant !== null,\n      \"b-table-sticky-column\": props.stickyColumn,\n      \"table-b-table-default\": props.stickyColumn && props.variant === null\n    }));\n    const scope = computed(() => props.colspan ? \"colspan\" : props.rowspan ? \"rowspan\" : \"col\");\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"th\", {\n        scope: scope.value,\n        class: normalizeClass(computedClasses.value),\n        colspan: unref(props).colspan,\n        rowspan: unref(props).rowspan,\n        \"data-label\": unref(props).stackedHeading\n      }, [unref(props).stackedHeading !== void 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_2$2, [renderSlot(_ctx.$slots, \"default\")])) : renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      })], 10, _hoisted_1$2);\n    };\n  }\n});\nconst _sfc_main$3 = /* @__PURE__ */defineComponent({\n  __name: \"BThead\",\n  props: {\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BThead\");\n    const computedClasses = computed(() => ({\n      [`table-${props.variant}`]: props.variant !== null\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"thead\", {\n        class: normalizeClass(computedClasses.value)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nconst _sfc_main$2 = /* @__PURE__ */defineComponent({\n  __name: \"BTr\",\n  props: {\n    variant: {\n      default: null\n    }\n  },\n  setup(__props) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTr\");\n    const computedClasses = computed(() => ({\n      [`table-${props.variant}`]: props.variant !== null\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"tr\", {\n        class: normalizeClass(computedClasses.value)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nconst getTableFieldHeadLabel = field => typeof field === \"string\" ? titleCase(field) : field.label !== void 0 ? field.label : typeof field.key === \"string\" ? titleCase(field.key) : field.key;\nconst TABLE_TAG_NAMES = [\"TD\", \"TH\", \"TR\"];\nconst eventFilter = [\"a\", \"a *\",\n// Include content inside links\n\"button\", \"button *\",\n// Include content inside buttons\n\"input:not(.disabled):not([disabled])\", \"select:not(.disabled):not([disabled])\", \"textarea:not(.disabled):not([disabled])\", '[role=\"link\"]', '[role=\"link\"] *', '[role=\"button\"]', '[role=\"button\"] *', \"[tabindex]:not(.disabled):not([disabled])\"].join(\",\");\nconst filterEvent = event => {\n  if (!event || !event.target) {\n    return false;\n  }\n  const el = event.target;\n  if (\"disabled\" in el && el.disabled || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {\n    return false;\n  }\n  if (el.closest(\".dropdown-menu\")) return true;\n  const label = el.tagName === \"LABEL\" ? el : el.closest(\"label\");\n  if (label) {\n    const labelFor = label.getAttribute(\"for\");\n    const input = labelFor ? document.getElementById(labelFor) : label.querySelector(\"input, select, textarea\");\n    if (input && !input.disabled) {\n      return true;\n    }\n  }\n  return el.matches(eventFilter);\n};\nconst _hoisted_1$1 = {\n  key: 0,\n  class: \"b-table-stacked-label\"\n};\nconst _hoisted_2$1 = {\n  class: \"d-inline-flex flex-nowrap align-items-center gap-1\"\n};\nconst _hoisted_3$1 = {\n  key: 2\n};\nconst _sfc_main$1 = /* @__PURE__ */defineComponent({\n  __name: \"BTableLite\",\n  props: {\n    align: {\n      default: void 0\n    },\n    caption: {\n      default: void 0\n    },\n    detailsTdClass: {\n      default: void 0\n    },\n    fieldColumnClass: {\n      type: [Function, String, Object, Array],\n      default: void 0\n    },\n    fields: {\n      default: () => []\n    },\n    footClone: {\n      type: Boolean,\n      default: false\n    },\n    footRowVariant: {\n      default: void 0\n    },\n    footVariant: {\n      default: void 0\n    },\n    headRowVariant: {\n      default: void 0\n    },\n    headVariant: {\n      default: void 0\n    },\n    items: {\n      default: () => []\n    },\n    labelStacked: {\n      type: Boolean,\n      default: false\n    },\n    modelValue: {\n      default: void 0\n    },\n    primaryKey: {\n      default: void 0\n    },\n    tbodyClass: {\n      default: void 0\n    },\n    tbodyTrAttrs: {\n      type: [Function, Object],\n      default: void 0\n    },\n    tbodyTrClass: {\n      type: [Function, String, Array, Object],\n      default: void 0\n    },\n    tfootClass: {\n      default: void 0\n    },\n    tfootTrClass: {\n      default: void 0\n    },\n    theadClass: {\n      default: void 0\n    },\n    theadTrClass: {\n      default: void 0\n    },\n    bordered: {\n      type: Boolean,\n      default: void 0\n    },\n    borderless: {\n      type: Boolean,\n      default: void 0\n    },\n    borderVariant: {\n      default: void 0\n    },\n    captionTop: {\n      type: Boolean,\n      default: void 0\n    },\n    dark: {\n      type: Boolean,\n      default: void 0\n    },\n    fixed: {\n      type: Boolean,\n      default: void 0\n    },\n    hover: {\n      type: Boolean,\n      default: void 0\n    },\n    id: {\n      default: void 0\n    },\n    noBorderCollapse: {\n      type: Boolean,\n      default: void 0\n    },\n    outlined: {\n      type: Boolean,\n      default: void 0\n    },\n    responsive: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    small: {\n      type: Boolean,\n      default: void 0\n    },\n    stacked: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    stickyHeader: {\n      type: [Boolean, String, Number],\n      default: void 0\n    },\n    striped: {\n      type: Boolean,\n      default: void 0\n    },\n    stripedColumns: {\n      type: Boolean,\n      default: void 0\n    },\n    variant: {\n      default: void 0\n    },\n    tableAttrs: {},\n    tableClass: {\n      default: void 0\n    }\n  },\n  emits: [\"head-clicked\", \"row-clicked\", \"row-dblclicked\", \"row-contextmenu\", \"row-hovered\", \"row-unhovered\", \"row-middle-clicked\"],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTableLite\");\n    const emit = __emit;\n    const slots = useSlots();\n    const generateDetailsItem = item => [item, item._showDetails];\n    const detailsMap = ref(/* @__PURE__ */new WeakMap());\n    watch(() => props.items, items => {\n      items.forEach(item => {\n        if (!isTableItem(item)) return;\n        detailsMap.value.set(...generateDetailsItem(item));\n      });\n    }, {\n      deep: true,\n      immediate: true\n    });\n    const computedTableClasses = computed(() => [props.tableClass, {\n      [`align-${props.align}`]: props.align !== void 0\n    }]);\n    const computedFields = computed(() => {\n      if (!props.fields.length && props.items.length) {\n        const [firstItem] = props.items;\n        if (isTableItem(firstItem) || Array.isArray(firstItem)) {\n          return Object.keys(firstItem).map(k => {\n            const label = startCase(k);\n            return {\n              key: k,\n              label,\n              tdAttr: props.stacked === true ? {\n                \"data-label\": label\n              } : void 0\n            };\n          });\n        }\n        return [{\n          key: \"\",\n          _noHeader: true\n        }];\n      }\n      return props.fields.map(f => {\n        if (isTableField(f)) {\n          return {\n            ...f,\n            tdAttr: props.stacked === true ? {\n              \"data-label\": startCase(f.key),\n              ...f.tdAttr\n            } : f.tdAttr\n          };\n        }\n        const label = startCase(f);\n        return {\n          key: f,\n          label,\n          tdAttr: props.stacked === true ? {\n            \"data-label\": label\n          } : void 0\n        };\n      });\n    });\n    const computedFieldsTotal = computed(() => computedFields.value.length);\n    const showComputedHeaders = computed(() => {\n      if (computedFieldsTotal.value > 0 && computedFields.value.every(el => el._noHeader === true)) return false;\n      return true;\n    });\n    const footerProps = computed(() => ({\n      variant: props.footVariant,\n      class: props.tfootClass\n    }));\n    const itemAttributes = (item, fieldKey, attr) => {\n      const val = get(item, fieldKey);\n      return attr && typeof attr === \"function\" ? attr(val, fieldKey, item) : attr;\n    };\n    const callThAttr = (item, field, type) => {\n      const fieldKey = String(field.key);\n      const val = get(item, fieldKey);\n      return field.thAttr && typeof field.thAttr === \"function\" ? field.thAttr(val, fieldKey, item, type) : field.thAttr;\n    };\n    const headerClicked = (field, event, isFooter = false) => {\n      emit(\"head-clicked\", field.key, field, event, isFooter);\n    };\n    const toggleRowDetails = tr => {\n      if (isTableItem(tr)) {\n        const prevValue = detailsMap.value.get(tr);\n        detailsMap.value.set(tr, !prevValue);\n        tr._showDetails = !prevValue;\n      }\n    };\n    const getFieldColumnClasses = field => [field.class, field.thClass, {\n      \"b-table-sticky-column\": field.stickyColumn\n    }, props.fieldColumnClass ? typeof props.fieldColumnClass === \"function\" ? props.fieldColumnClass(field) : props.fieldColumnClass : null];\n    const getFieldRowClasses = (field, tr) => {\n      var _a, _b;\n      const val = get(tr, String(field.key));\n      return [field.class, typeof field.tdClass === \"function\" ? field.tdClass(val, String(field.key), tr) : field.tdClass, (isTableItem(tr) ? (_a = tr._cellVariants) == null ? void 0 : _a[field.key] : false) ? `table-${(_b = tr._cellVariants) == null ? void 0 : _b[field.key]}` : null, {\n        \"b-table-sticky-column\": field.stickyColumn\n      }];\n    };\n    const handleMiddleClick = (item, itemIndex, event) => {\n      if (event.button === 1 && !filterEvent(event)) {\n        emit(\"row-middle-clicked\", item, itemIndex, event);\n      }\n    };\n    const callTbodyTrAttrs = (item, type) => props.tbodyTrAttrs ? typeof props.tbodyTrAttrs === \"function\" ? props.tbodyTrAttrs(item, type) : props.tbodyTrAttrs : null;\n    const getRowClasses = (item, type) => props.tbodyTrClass ? typeof props.tbodyTrClass === \"function\" ? props.tbodyTrClass(item, type) : props.tbodyTrClass : null;\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(_sfc_main$8, {\n        id: unref(props).id,\n        bordered: unref(props).bordered,\n        borderless: unref(props).borderless,\n        \"border-variant\": unref(props).borderVariant,\n        \"caption-top\": unref(props).captionTop,\n        dark: unref(props).dark,\n        fixed: unref(props).fixed,\n        hover: unref(props).hover,\n        \"no-border-collapse\": unref(props).noBorderCollapse,\n        outlined: unref(props).outlined,\n        responsive: unref(props).responsive,\n        small: unref(props).small,\n        stacked: unref(props).stacked,\n        \"sticky-header\": unref(props).stickyHeader,\n        striped: unref(props).striped,\n        \"table-class\": computedTableClasses.value,\n        variant: unref(props).variant,\n        \"striped-columns\": unref(props).stripedColumns\n      }, {\n        default: withCtx(() => [withDirectives(createVNode(_sfc_main$3, {\n          variant: unref(props).headVariant,\n          class: normalizeClass(unref(props).theadClass)\n        }, {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"thead-top\", {\n            columns: computedFieldsTotal.value,\n            fields: computedFields.value\n          }), createVNode(_sfc_main$2, {\n            variant: unref(props).headRowVariant,\n            class: normalizeClass(unref(props).theadTrClass)\n          }, {\n            default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, field => {\n              return openBlock(), createBlock(_sfc_main$4, mergeProps({\n                key: field.key,\n                scope: \"col\",\n                class: getFieldColumnClasses(field),\n                title: field.headerTitle,\n                variant: field.variant,\n                abbr: field.headerAbbr,\n                style: field.thStyle,\n                ref_for: true\n              }, callThAttr(null, field, \"top\"), {\n                onClick: $event => headerClicked(field, $event)\n              }), {\n                default: withCtx(() => [renderSlot(_ctx.$slots, slots[`head(${String(field.key)})`] ? `head(${String(field.key)})` : \"head()\", {\n                  label: field.label,\n                  column: field.key,\n                  field,\n                  isFoot: false\n                }, () => [createTextVNode(toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)])]),\n                _: 2\n              }, 1040, [\"class\", \"title\", \"variant\", \"abbr\", \"style\", \"onClick\"]);\n            }), 128))]),\n            _: 3\n          }, 8, [\"variant\", \"class\"]), slots[\"thead-sub\"] ? (openBlock(), createBlock(_sfc_main$2, {\n            key: 0\n          }, {\n            default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, field => {\n              return openBlock(), createBlock(_sfc_main$6, {\n                key: field.key,\n                scope: \"col\",\n                variant: field.variant,\n                class: normalizeClass([field.class, field.thClass])\n              }, {\n                default: withCtx(() => [renderSlot(_ctx.$slots, \"thead-sub\", {\n                  items: unref(props).items,\n                  fields: computedFields.value,\n                  field\n                }, () => [createTextVNode(toDisplayString(field.label), 1)])]),\n                _: 2\n              }, 1032, [\"variant\", \"class\"]);\n            }), 128))]),\n            _: 3\n          })) : createCommentVNode(\"\", true)]),\n          _: 3\n        }, 8, [\"variant\", \"class\"]), [[vShow, showComputedHeaders.value]]), createVNode(_sfc_main$7, {\n          class: normalizeClass(unref(props).tbodyClass)\n        }, {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"custom-body\", {\n            fields: computedFields.value,\n            items: unref(props).items,\n            columns: computedFieldsTotal.value\n          }, () => [!unref(props).stacked && slots[\"top-row\"] ? (openBlock(), createBlock(_sfc_main$2, mergeProps({\n            key: 0,\n            class: getRowClasses(null, \"row-top\")\n          }, callTbodyTrAttrs(null, \"row-top\")), {\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"top-row\", {\n              columns: computedFieldsTotal.value,\n              fields: computedFields.value\n            })]),\n            _: 3\n          }, 16, [\"class\"])) : createCommentVNode(\"\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(props).items, (item, itemIndex) => {\n            return openBlock(), createElementBlock(Fragment, {\n              key: unref(props).primaryKey ? unref(get)(item, unref(props).primaryKey) : itemIndex\n            }, [createVNode(_sfc_main$2, mergeProps({\n              class: getRowClasses(item, \"row\"),\n              variant: unref(isTableItem)(item) ? item._rowVariant : void 0,\n              ref_for: true\n            }, callTbodyTrAttrs(item, \"row\"), {\n              onClick: $event => !unref(filterEvent)($event) && emit(\"row-clicked\", item, itemIndex, $event),\n              onDblclick: $event => !unref(filterEvent)($event) && emit(\"row-dblclicked\", item, itemIndex, $event),\n              onContextmenu: $event => !unref(filterEvent)($event) && emit(\"row-contextmenu\", item, itemIndex, $event),\n              onMouseenter: $event => !unref(filterEvent)($event) && emit(\"row-hovered\", item, itemIndex, $event),\n              onMouseleave: $event => !unref(filterEvent)($event) && emit(\"row-unhovered\", item, itemIndex, $event),\n              onMousedown: $event => handleMiddleClick(item, itemIndex, $event)\n            }), {\n              default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, field => {\n                var _a;\n                return openBlock(), createBlock(_sfc_main$6, mergeProps({\n                  key: field.key,\n                  variant: (unref(isTableItem)(item) ? (_a = item._cellVariants) == null ? void 0 : _a[field.key] : false) ? null : field.variant,\n                  class: getFieldRowClasses(field, item),\n                  ref_for: true\n                }, itemAttributes(item, String(field.key), field.tdAttr)), {\n                  default: withCtx(() => [unref(props).stacked && unref(props).labelStacked ? (openBlock(), createElementBlock(\"label\", _hoisted_1$1, toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, slots[`cell(${String(field.key)})`] ? `cell(${String(field.key)})` : \"cell()\", {\n                    value: unref(formatItem)(item, String(field.key), field.formatter),\n                    unformatted: unref(get)(item, String(field.key)),\n                    index: itemIndex,\n                    item,\n                    field,\n                    items: _ctx.items,\n                    toggleDetails: () => toggleRowDetails(item),\n                    detailsShowing: unref(isTableItem)(item) ? detailsMap.value.get(item) ?? false : false\n                  }, () => [!slots[`cell(${String(field.key)})`] && !slots[\"cell()\"] ? (openBlock(), createElementBlock(Fragment, {\n                    key: 0\n                  }, [createTextVNode(toDisplayString(unref(formatItem)(item, String(field.key), field.formatter)), 1)], 64)) : createCommentVNode(\"\", true)])]),\n                  _: 2\n                }, 1040, [\"variant\", \"class\"]);\n              }), 128))]),\n              _: 2\n            }, 1040, [\"class\", \"variant\", \"onClick\", \"onDblclick\", \"onContextmenu\", \"onMouseenter\", \"onMouseleave\", \"onMousedown\"]), unref(isTableItem)(item) && detailsMap.value.get(item) === true && slots[\"row-details\"] ? (openBlock(), createElementBlock(Fragment, {\n              key: 0\n            }, [createVNode(_sfc_main$2, {\n              \"aria-hidden\": \"true\",\n              role: \"presentation\",\n              class: \"d-none\"\n            }), createVNode(_sfc_main$2, mergeProps({\n              class: getRowClasses(item, \"row-details\"),\n              variant: item._rowVariant,\n              ref_for: true\n            }, callTbodyTrAttrs(item, \"row-details\")), {\n              default: withCtx(() => [createVNode(_sfc_main$6, {\n                colspan: computedFieldsTotal.value,\n                class: normalizeClass(_ctx.detailsTdClass)\n              }, {\n                default: withCtx(() => [renderSlot(_ctx.$slots, \"row-details\", {\n                  item,\n                  toggleDetails: () => toggleRowDetails(item),\n                  fields: computedFields.value,\n                  index: itemIndex\n                })]),\n                _: 2\n              }, 1032, [\"colspan\", \"class\"])]),\n              _: 2\n            }, 1040, [\"class\", \"variant\"])], 64)) : createCommentVNode(\"\", true)], 64);\n          }), 128)), !unref(props).stacked && slots[\"bottom-row\"] ? (openBlock(), createBlock(_sfc_main$2, mergeProps({\n            key: 1,\n            class: [\"bottom-row\", getRowClasses(null, \"row-bottom\")]\n          }, callTbodyTrAttrs(null, \"row-bottom\")), {\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"bottom-row\", {\n              columns: computedFieldsTotal.value,\n              fields: computedFields.value\n            })]),\n            _: 3\n          }, 16, [\"class\"])) : createCommentVNode(\"\", true)])]),\n          _: 3\n        }, 8, [\"class\"]), unref(props).footClone ? (openBlock(), createBlock(_sfc_main$5, normalizeProps(mergeProps({\n          key: 0\n        }, footerProps.value)), {\n          default: withCtx(() => [createVNode(_sfc_main$2, {\n            variant: unref(props).footRowVariant,\n            class: normalizeClass(unref(props).tfootTrClass)\n          }, {\n            default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, field => {\n              return openBlock(), createBlock(_sfc_main$4, mergeProps({\n                key: field.key,\n                scope: \"col\",\n                class: getFieldColumnClasses(field),\n                title: field.headerTitle,\n                abbr: field.headerAbbr,\n                style: field.thStyle,\n                variant: field.variant,\n                ref_for: true\n              }, callThAttr(null, field, \"bottom\"), {\n                onClick: $event => headerClicked(field, $event, true)\n              }), {\n                default: withCtx(() => [createElementVNode(\"div\", _hoisted_2$1, [createElementVNode(\"div\", null, [renderSlot(_ctx.$slots, slots[`foot(${String(field.key)})`] ? `foot(${String(field.key)})` : \"foot()\", {\n                  label: field.label,\n                  column: field.key,\n                  field,\n                  isFoot: true\n                }, () => [createTextVNode(toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)])])])]),\n                _: 2\n              }, 1040, [\"class\", \"title\", \"abbr\", \"style\", \"variant\", \"onClick\"]);\n            }), 128))]),\n            _: 3\n          }, 8, [\"variant\", \"class\"])]),\n          _: 3\n        }, 16)) : slots[\"custom-foot\"] ? (openBlock(), createBlock(_sfc_main$5, normalizeProps(mergeProps({\n          key: 1\n        }, footerProps.value)), {\n          default: withCtx(() => [renderSlot(_ctx.$slots, \"custom-foot\", {\n            fields: computedFields.value,\n            items: unref(props).items,\n            columns: computedFieldsTotal.value\n          })]),\n          _: 3\n        }, 16)) : createCommentVNode(\"\", true), slots[\"table-caption\"] || unref(props).caption ? (openBlock(), createElementBlock(\"caption\", _hoisted_3$1, [renderSlot(_ctx.$slots, \"table-caption\", {}, () => [createTextVNode(toDisplayString(unref(props).caption), 1)])])) : createCommentVNode(\"\", true)]),\n        _: 3\n      }, 8, [\"id\", \"bordered\", \"borderless\", \"border-variant\", \"caption-top\", \"dark\", \"fixed\", \"hover\", \"no-border-collapse\", \"outlined\", \"responsive\", \"small\", \"stacked\", \"sticky-header\", \"striped\", \"table-class\", \"variant\", \"striped-columns\"]);\n    };\n  }\n});\nconst _hoisted_1 = {\n  style: {\n    opacity: 0.4\n  },\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  fill: \"currentColor\",\n  class: \"bi bi-arrow-up-short\",\n  viewBox: \"0 0 16 16\",\n  \"aria-hidden\": \"\"\n};\nconst _hoisted_2 = {\n  role: \"alert\",\n  \"aria-live\": \"polite\"\n};\nconst _hoisted_3 = {\n  class: \"text-center my-2\"\n};\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"BTable\",\n  props: /* @__PURE__ */mergeModels({\n    provider: {\n      default: void 0\n    },\n    noProvider: {\n      default: void 0\n    },\n    noProviderPaging: {\n      type: Boolean,\n      default: false\n    },\n    noProviderSorting: {\n      type: Boolean,\n      default: false\n    },\n    noProviderFiltering: {\n      type: Boolean,\n      default: false\n    },\n    mustSort: {\n      type: [Boolean, Array],\n      default: false\n    },\n    selectable: {\n      type: Boolean,\n      default: false\n    },\n    multisort: {\n      type: Boolean,\n      default: false\n    },\n    stickySelect: {\n      type: Boolean,\n      default: false\n    },\n    selectHead: {\n      type: [Boolean, String],\n      default: true\n    },\n    selectMode: {\n      default: \"multi\"\n    },\n    selectionVariant: {\n      default: \"primary\"\n    },\n    busyLoadingText: {\n      default: \"Loading...\"\n    },\n    perPage: {\n      default: Number.POSITIVE_INFINITY\n    },\n    currentPage: {\n      default: 1\n    },\n    filter: {\n      default: void 0\n    },\n    filterable: {\n      default: void 0\n    },\n    noLocalSorting: {\n      type: Boolean,\n      default: false\n    },\n    noSelectOnClick: {\n      type: Boolean,\n      default: false\n    },\n    noSortableIcon: {\n      type: Boolean,\n      default: false\n    },\n    emptyFilteredText: {\n      default: \"There are no records matching your request\"\n    },\n    emptyText: {\n      default: \"There are no records to show\"\n    },\n    showEmpty: {\n      type: Boolean,\n      default: false\n    },\n    align: {\n      default: void 0\n    },\n    caption: {\n      default: void 0\n    },\n    detailsTdClass: {\n      default: void 0\n    },\n    fieldColumnClass: {\n      type: [Function, String, Object, Array],\n      default: void 0\n    },\n    fields: {\n      default: () => []\n    },\n    footClone: {\n      type: Boolean,\n      default: void 0\n    },\n    footRowVariant: {\n      default: void 0\n    },\n    footVariant: {\n      default: void 0\n    },\n    headRowVariant: {\n      default: void 0\n    },\n    headVariant: {\n      default: void 0\n    },\n    items: {\n      default: () => []\n    },\n    labelStacked: {\n      type: Boolean,\n      default: void 0\n    },\n    modelValue: {\n      default: void 0\n    },\n    primaryKey: {\n      default: void 0\n    },\n    tbodyClass: {\n      default: void 0\n    },\n    tbodyTrAttrs: {},\n    tbodyTrClass: {\n      type: [Function, String, Array, Object],\n      default: void 0\n    },\n    tfootClass: {\n      default: void 0\n    },\n    tfootTrClass: {\n      default: void 0\n    },\n    theadClass: {\n      default: void 0\n    },\n    theadTrClass: {\n      default: void 0\n    },\n    bordered: {\n      type: Boolean,\n      default: void 0\n    },\n    borderless: {\n      type: Boolean,\n      default: void 0\n    },\n    borderVariant: {\n      default: void 0\n    },\n    captionTop: {\n      type: Boolean,\n      default: void 0\n    },\n    dark: {\n      type: Boolean,\n      default: void 0\n    },\n    fixed: {\n      type: Boolean,\n      default: void 0\n    },\n    hover: {\n      type: Boolean,\n      default: void 0\n    },\n    id: {\n      default: void 0\n    },\n    noBorderCollapse: {\n      type: Boolean,\n      default: void 0\n    },\n    outlined: {\n      type: Boolean,\n      default: void 0\n    },\n    responsive: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    small: {\n      type: Boolean,\n      default: void 0\n    },\n    stacked: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    stickyHeader: {\n      type: [Boolean, String, Number],\n      default: void 0\n    },\n    striped: {\n      type: Boolean,\n      default: void 0\n    },\n    stripedColumns: {\n      type: Boolean,\n      default: void 0\n    },\n    variant: {\n      default: void 0\n    },\n    tableAttrs: {}\n  }, {\n    \"sortBy\": {\n      default: void 0\n    },\n    \"sortByModifiers\": {},\n    \"busy\": {\n      type: Boolean,\n      ...{\n        default: false\n      }\n    },\n    \"busyModifiers\": {},\n    \"selectedItems\": {\n      default: () => []\n    },\n    \"selectedItemsModifiers\": {}\n  }),\n  emits: /* @__PURE__ */mergeModels([\"filtered\", \"head-clicked\", \"row-clicked\", \"row-dblclicked\", \"row-contextmenu\", \"row-hovered\", \"row-unhovered\", \"row-middle-clicked\", \"row-selected\", \"row-unselected\", \"sorted\", \"change\"], [\"update:sortBy\", \"update:busy\", \"update:selectedItems\"]),\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    const _props = __props;\n    const props = useDefaults(_props, \"BTable\");\n    const emit = __emit;\n    const slots = useSlots();\n    const dynamicCellSlots = computed(() => Object.keys(slots).filter(key => key.startsWith(\"cell(\")));\n    const dynamicFootSlots = computed(() => Object.keys(slots).filter(key => key.startsWith(\"foot(\")));\n    const sortByModel = useModel(__props, \"sortBy\");\n    const busyModel = useModel(__props, \"busy\");\n    const selectedItemsModel = useModel(__props, \"selectedItems\");\n    const selectedItemsToSet = computed({\n      get: () => /* @__PURE__ */new Set([...selectedItemsModel.value]),\n      set: val => {\n        selectedItemsModel.value = [...val];\n      }\n    });\n    watch(selectedItemsToSet, (newValue, oldValue) => {\n      Array.from(oldValue).filter(item => !newValue.has(item)).forEach(item => {\n        emit(\"row-unselected\", item);\n      });\n      Array.from(newValue).filter(item => !oldValue.has(item)).forEach(item => {\n        emit(\"row-selected\", item);\n      });\n    });\n    const selectedItemsSetUtilities = {\n      add: item => {\n        const value = new Set(selectedItemsToSet.value);\n        value.add(item);\n        selectedItemsToSet.value = value;\n      },\n      clear: () => {\n        selectedItemsToSet.value.forEach(item => {\n          selectedItemsSetUtilities.delete(item);\n        });\n      },\n      delete: item => {\n        const value = new Set(selectedItemsToSet.value);\n        if (props.primaryKey) {\n          const pkey = props.primaryKey;\n          selectedItemsModel.value.forEach((v, i) => {\n            const selectedKey = get(v, pkey);\n            const itemKey = get(item, pkey);\n            if (!!selectedKey && !!itemKey && selectedKey === itemKey) {\n              value.delete(selectedItemsModel.value[i]);\n            }\n          });\n        } else {\n          value.delete(item);\n        }\n        selectedItemsToSet.value = value;\n      },\n      set: items => {\n        selectedItemsToSet.value = new Set(items);\n      },\n      has: item => {\n        if (!props.primaryKey) return selectedItemsToSet.value.has(item);\n        const pkey = props.primaryKey;\n        for (const selected of selectedItemsToSet.value) {\n          const selectedKey = get(selected, pkey);\n          const itemKey = get(item, pkey);\n          if (!!selectedKey && !!itemKey && selectedKey === itemKey) return true;\n        }\n        return false;\n      }\n    };\n    const internalItems = ref([]);\n    const perPageNumber = useToNumber(() => props.perPage, {\n      method: \"parseInt\"\n    });\n    const currentPageNumber = useToNumber(() => props.currentPage, {\n      method: \"parseInt\"\n    });\n    const isFilterableTable = computed(() => !!props.filter);\n    const usesProvider = computed(() => props.provider !== void 0);\n    const isSelecting = computed(() => selectedItemsToSet.value.size > 0);\n    const isSortable = computed(() => sortByModel.value !== void 0 || props.fields.some(field => typeof field === \"object\" && field !== null && field.sortable === true));\n    const computedFields = computed(() => props.fields.map(el => {\n      var _a;\n      if (!isTableField(el)) {\n        const label = startCase(el);\n        return {\n          key: el,\n          label,\n          tdAttr: props.stacked === true ? {\n            \"data-label\": label\n          } : void 0\n        };\n      }\n      const value = (_a = sortByModel.value) == null ? void 0 : _a.find(sb => el.key === sb.key);\n      const sortValue = isSortable.value === false ? void 0 : value === void 0 ? \"none\" : value.order === \"desc\" ? \"descending\" : value.order === \"asc\" ? \"ascending\" : \"none\";\n      return {\n        ...el,\n        thAttr: {\n          \"aria-sort\": sortValue,\n          ...el.thAttr\n        }\n      };\n    }));\n    const tableClasses = computed(() => ({\n      \"b-table-busy\": busyModel.value,\n      \"b-table-selectable\": props.selectable,\n      \"user-select-none\": props.selectable && isSelecting.value\n    }));\n    const getBusyRowClasses = computed(() => [props.tbodyTrClass ? typeof props.tbodyTrClass === \"function\" ? props.tbodyTrClass(null, \"table-busy\") : props.tbodyTrClass : null]);\n    const getFieldColumnClasses = field => [{\n      \"b-table-sortable-column\": isSortable.value && field.sortable\n    }];\n    const getRowClasses = (item, type) => [{\n      [`selected table-${props.selectionVariant}`]: props.selectable && !!item && selectedItemsSetUtilities.has(item)\n    }, props.tbodyTrClass ? typeof props.tbodyTrClass === \"function\" ? props.tbodyTrClass(item, type) : props.tbodyTrClass : null];\n    const getFormatter = value => typeof value.sortByFormatted === \"function\" ? value.sortByFormatted : value.formatter;\n    const computedItems = computed(() => {\n      const sortItems = items => {\n        var _a;\n        const sortByItems = (_a = sortByModel.value) == null ? void 0 : _a.filter(el => !!el.order);\n        if (!sortByItems || sortByItems.length === 0) return items;\n        return [...items].sort((a, b) => {\n          for (let i = 0; i < (sortByItems.length ?? 0); i++) {\n            const sortOption = sortByItems[i];\n            const realVal = ob => {\n              if (!isTableItem(ob)) return String(ob);\n              const sortField = computedFields.value.find(el => {\n                if (isTableField(el)) return el.key === sortOption.key;\n                return false;\n              });\n              const val = get(ob, sortOption.key);\n              if (isTableField(sortField) && !!sortField.sortByFormatted) {\n                const formatter = getFormatter(sortField);\n                if (formatter) {\n                  return String(formatItem(ob, String(sortField.key), formatter));\n                }\n              }\n              return typeof val === \"object\" && val !== null ? JSON.stringify(val) : (val == null ? void 0 : val.toString()) ?? \"\";\n            };\n            const aValue = realVal(a);\n            const bValue = realVal(b);\n            const comparison = sortOption.comparer ? sortOption.comparer(aValue, bValue) : aValue.localeCompare(bValue, void 0, {\n              numeric: true\n            });\n            if (comparison !== 0) {\n              return sortOption.order === \"asc\" ? comparison : -comparison;\n            }\n          }\n          return 0;\n        });\n      };\n      const filterItems = items => items.filter(item => isTableItem(item) ? Object.entries(item).some(([key, val]) => {\n        var _a, _b, _c;\n        if (val === null || val === void 0 || key[0] === \"_\" || !((_a = props.filterable) == null ? void 0 : _a.includes(key)) && !!((_b = props.filterable) == null ? void 0 : _b.length)) return false;\n        const realVal = () => {\n          const filterField = computedFields.value.find(el => {\n            if (isTableField(el)) return el.key === key;\n            return false;\n          });\n          if (isTableField(filterField) && !!filterField.filterByFormatted) {\n            const formatter = getFormatter(filterField);\n            if (formatter) {\n              return String(formatter(val, String(filterField.key), item));\n            }\n          }\n          return typeof val === \"object\" ? JSON.stringify(Object.values(val)) : val.toString();\n        };\n        const itemValue = realVal();\n        return itemValue.toLowerCase().includes(((_c = props.filter) == null ? void 0 : _c.toLowerCase()) ?? \"\");\n      }) : true);\n      let mappedItems = usesProvider.value ? internalItems.value : props.items;\n      mappedItems = mappedItems.map(item => {\n        if (typeof item === \"object\" && item !== null && Object.keys(item).some(key => key.includes(\".\"))) {\n          let newItem = {};\n          for (const key in item) {\n            if (key.includes(\".\")) {\n              newItem = set(newItem, key, item[key]);\n            } else {\n              newItem[key] = item[key];\n            }\n          }\n          return newItem;\n        }\n        return item;\n      });\n      if (isFilterableTable.value === true && !usesProvider.value || isFilterableTable.value === true && usesProvider.value && props.noProviderFiltering) {\n        mappedItems = filterItems(mappedItems);\n      }\n      if (isSortable.value === true && !usesProvider.value && !props.noLocalSorting || isSortable.value === true && usesProvider.value && props.noProviderSorting) {\n        mappedItems = sortItems(mappedItems);\n      }\n      return mappedItems;\n    });\n    const emptySlotScope = computed(() => ({\n      emptyFilteredText: props.emptyFilteredText,\n      emptyText: props.emptyText,\n      fields: computedFields.value,\n      items: computedItems.value\n    }));\n    const computedDisplayItems = computed(() => {\n      if (Number.isNaN(perPageNumber.value) || usesProvider.value && !props.noProviderPaging) {\n        return computedItems.value;\n      }\n      return computedItems.value.slice((currentPageNumber.value - 1) * (perPageNumber.value || Number.POSITIVE_INFINITY), currentPageNumber.value * (perPageNumber.value || Number.POSITIVE_INFINITY));\n    });\n    watch(computedDisplayItems, v => {\n      emit(\"change\", v);\n    });\n    const handleRowSelection = (row, index, shiftClicked = false, ctrlClicked = false, metaClicked = false) => {\n      if (!props.selectable) return;\n      if (props.selectMode === \"single\" || props.selectMode === \"multi\") {\n        if (shiftClicked || ctrlClicked) return;\n        if (selectedItemsSetUtilities.has(row)) {\n          selectedItemsSetUtilities.delete(row);\n        } else {\n          if (props.selectMode === \"single\") {\n            selectedItemsSetUtilities.set([row]);\n          } else {\n            selectedItemsSetUtilities.add(row);\n          }\n        }\n      } else {\n        if (ctrlClicked || metaClicked) {\n          if (selectedItemsSetUtilities.has(row)) {\n            selectedItemsSetUtilities.delete(row);\n          } else {\n            selectedItemsSetUtilities.add(row);\n          }\n        } else if (shiftClicked) {\n          const lastSelectedItem = [...selectedItemsToSet.value].pop();\n          const lastSelectedIndex = computedItems.value.findIndex(i => i === lastSelectedItem);\n          const selectStartIndex = Math.min(lastSelectedIndex, index);\n          const selectEndIndex = Math.max(lastSelectedIndex, index);\n          const items = computedItems.value.slice(selectStartIndex, selectEndIndex + 1);\n          selectedItemsSetUtilities.set(items);\n        } else {\n          selectedItemsSetUtilities.set([row]);\n        }\n      }\n    };\n    const onRowClick = (row, index, e) => {\n      if (props.noSelectOnClick === false) {\n        handleRowSelection(row, index, e.shiftKey, e.ctrlKey, e.metaKey);\n      }\n      emit(\"row-clicked\", row, index, e);\n    };\n    const handleFieldSorting = field => {\n      var _a, _b;\n      if (!isSortable.value) return;\n      const fieldKey = typeof field === \"object\" && field !== null ? field.key : field;\n      const fieldSortable = typeof field === \"object\" && field !== null ? field.sortable : false;\n      if (!(isSortable.value === true && fieldSortable === true)) return;\n      const resolveOrder = val => {\n        if (val === \"asc\") return \"desc\";\n        if (val === void 0) return \"asc\";\n        if (props.mustSort === true || Array.isArray(props.mustSort) && props.mustSort.includes(fieldKey)) return \"asc\";\n        return void 0;\n      };\n      const index = ((_a = sortByModel.value) == null ? void 0 : _a.findIndex(el => el.key === fieldKey)) ?? -1;\n      const originalValue = (_b = sortByModel.value) == null ? void 0 : _b[index];\n      const updatedValue =\n      // If value is new, we default to ascending\n      // Otherwise we make a temp copy of the value\n      index === -1 || !originalValue ? {\n        key: fieldKey,\n        order: \"asc\"\n      } : {\n        ...originalValue\n      };\n      const handleMultiSort = () => {\n        var _a2, _b2;\n        let val = updatedValue;\n        if (index === -1) {\n          sortByModel.value = [...(sortByModel.value ?? []), updatedValue];\n        } else {\n          const order = resolveOrder(updatedValue.order);\n          val = {\n            ...updatedValue,\n            order\n          };\n          sortByModel.value = order ? (_a2 = sortByModel.value) == null ? void 0 : _a2.map(el => el.key === val.key ? val : el) : (_b2 = sortByModel.value) == null ? void 0 : _b2.filter(el => el.key !== val.key);\n        }\n        return val;\n      };\n      const handleSingleSort = () => {\n        const val = {\n          ...updatedValue,\n          order: index === -1 ? updatedValue.order : resolveOrder(updatedValue.order)\n        };\n        sortByModel.value = [val];\n        return val;\n      };\n      emit(\"sorted\", props.multisort === true ? handleMultiSort() : handleSingleSort());\n    };\n    const onFieldHeadClick = (fieldKey, field, event, isFooter = false) => {\n      emit(\"head-clicked\", fieldKey, field, event, isFooter);\n      handleFieldSorting(field);\n    };\n    const callItemsProvider = async () => {\n      if (!usesProvider.value || props.provider === void 0 || busyModel.value) return;\n      busyModel.value = true;\n      const response = props.provider({\n        currentPage: currentPageNumber.value,\n        filter: props.filter,\n        sortBy: sortByModel.value,\n        perPage: perPageNumber.value\n      });\n      try {\n        const items = response instanceof Promise ? await response : response;\n        if (items === void 0) return;\n        internalItems.value = items;\n      } finally {\n        busyModel.value = false;\n      }\n    };\n    const providerPropsWatch = async (prop, val, oldVal) => {\n      if (val === oldVal) return;\n      const inNoProvider = key => {\n        var _a;\n        return ((_a = props.noProvider) == null ? void 0 : _a.includes(key)) === true;\n      };\n      const noProvideWhenPaging = (prop === \"currentPage\" || prop === \"perPage\") && (inNoProvider(\"paging\") || props.noProviderPaging === true);\n      const noProvideWhenFiltering = prop === \"filter\" && (inNoProvider(\"filtering\") || props.noProviderFiltering === true);\n      const noProvideWhenSorting = (prop === \"sortBy\" || prop === \"sortDesc\") && (inNoProvider(\"sorting\") || props.noProviderSorting === true);\n      if (noProvideWhenPaging || noProvideWhenFiltering || noProvideWhenSorting) return;\n      if (usesProvider.value === true) {\n        await callItemsProvider();\n      }\n      if (!(prop === \"currentPage\" || prop === \"perPage\")) {\n        emit(\"filtered\", [...computedItems.value]);\n      }\n    };\n    watch(() => props.filter, (filter, oldFilter) => {\n      providerPropsWatch(\"filter\", filter, oldFilter);\n      if (filter === oldFilter || usesProvider.value) return;\n      if (!filter) {\n        emit(\"filtered\", [...computedItems.value]);\n      }\n    });\n    watch(currentPageNumber, (val, oldVal) => {\n      providerPropsWatch(\"currentPage\", val, oldVal);\n    });\n    watch(perPageNumber, (val, oldVal) => {\n      providerPropsWatch(\"perPage\", val, oldVal);\n    });\n    watch(sortByModel, (val, oldVal) => {\n      providerPropsWatch(\"sortBy\", val, oldVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.provider, newValue => {\n      if (newValue === void 0) {\n        internalItems.value = [];\n        return;\n      }\n      callItemsProvider();\n    });\n    onMounted(callItemsProvider);\n    const exposedSelectableUtilities = {\n      clearSelected: () => {\n        if (!props.selectable) return;\n        selectedItemsSetUtilities.clear();\n      },\n      selectAllRows: () => {\n        if (!props.selectable) return;\n        selectedItemsToSet.value = /* @__PURE__ */new Set([...computedItems.value]);\n      },\n      selectRow: index => {\n        if (!props.selectable) return;\n        const item = computedItems.value[index];\n        if (!item || selectedItemsSetUtilities.has(item)) return;\n        selectedItemsSetUtilities.add(item);\n      },\n      unselectRow: index => {\n        if (!props.selectable) return;\n        const item = computedItems.value[index];\n        if (!item || !selectedItemsSetUtilities.has(item)) return;\n        selectedItemsSetUtilities.delete(item);\n      },\n      isRowSelected: index => {\n        if (!props.selectable) return false;\n        const item = computedItems.value[index];\n        return selectedItemsSetUtilities.has(item);\n      }\n    };\n    __expose({\n      // The row selection methods are really for compat. Users should probably use the v-model though\n      ...exposedSelectableUtilities,\n      refresh: callItemsProvider\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(_sfc_main$1, mergeProps(unref(props), {\n        \"aria-busy\": busyModel.value,\n        items: computedDisplayItems.value,\n        fields: computedFields.value,\n        \"table-class\": tableClasses.value,\n        \"tbody-tr-class\": getRowClasses,\n        \"field-column-class\": getFieldColumnClasses,\n        onHeadClicked: onFieldHeadClick,\n        onRowClicked: onRowClick,\n        onRowDblclicked: _cache[0] || (_cache[0] = (row, index, e) => {\n          emit(\"row-dblclicked\", row, index, e);\n        }),\n        onRowContextmenu: _cache[1] || (_cache[1] = (row, index, e) => {\n          emit(\"row-contextmenu\", row, index, e);\n        }),\n        onRowHovered: _cache[2] || (_cache[2] = (row, index, e) => {\n          emit(\"row-hovered\", row, index, e);\n        }),\n        onRowUnhovered: _cache[3] || (_cache[3] = (row, index, e) => {\n          emit(\"row-unhovered\", row, index, e);\n        }),\n        onRowMiddleClicked: _cache[4] || (_cache[4] = (row, index, e) => {\n          emit(\"row-middle-clicked\", row, index, e);\n        })\n      }), createSlots({\n        \"custom-body\": withCtx(scope => [busyModel.value && slots[\"table-busy\"] ? (openBlock(), createBlock(_sfc_main$2, {\n          key: 0,\n          class: normalizeClass([\"b-table-busy-slot\", getBusyRowClasses.value])\n        }, {\n          default: withCtx(() => [createVNode(_sfc_main$6, {\n            colspan: scope.fields.length\n          }, {\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"table-busy\")]),\n            _: 2\n          }, 1032, [\"colspan\"])]),\n          _: 2\n        }, 1032, [\"class\"])) : unref(props).showEmpty === true && computedItems.value.length === 0 ? (openBlock(), createBlock(_sfc_main$2, {\n          key: 1,\n          class: \"b-table-empty-row\"\n        }, {\n          default: withCtx(() => [createVNode(_sfc_main$6, {\n            colspan: computedFields.value.length\n          }, {\n            default: withCtx(() => [createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [isFilterableTable.value ? renderSlot(_ctx.$slots, \"empty-filtered\", normalizeProps(mergeProps({\n              key: 0\n            }, emptySlotScope.value)), () => [createTextVNode(toDisplayString(unref(props).emptyFilteredText), 1)]) : renderSlot(_ctx.$slots, \"empty\", normalizeProps(mergeProps({\n              key: 1\n            }, emptySlotScope.value)), () => [createTextVNode(toDisplayString(unref(props).emptyText), 1)])])])]),\n            _: 3\n          }, 8, [\"colspan\"])]),\n          _: 3\n        })) : createCommentVNode(\"\", true)]),\n        _: 2\n      }, [slots[\"thead-top\"] ? {\n        name: \"thead-top\",\n        fn: withCtx(scope => [renderSlot(_ctx.$slots, \"thead-top\", mergeProps(scope, {\n          clearSelected: exposedSelectableUtilities.clearSelected,\n          selectAllRows: exposedSelectableUtilities.selectAllRows,\n          fields: computedFields.value\n        }))]),\n        key: \"0\"\n      } : void 0, slots[\"thead-sub\"] ? {\n        name: \"thead-sub\",\n        fn: withCtx(scope => [renderSlot(_ctx.$slots, \"thead-sub\", mergeProps(scope, {\n          fields: computedFields.value\n        }))]),\n        key: \"1\"\n      } : void 0, slots[\"top-row\"] ? {\n        name: \"top-row\",\n        fn: withCtx(scope => [renderSlot(_ctx.$slots, \"top-row\", mergeProps(scope, {\n          fields: computedFields.value\n        }))]),\n        key: \"2\"\n      } : void 0, slots[\"row-details\"] ? {\n        name: \"row-details\",\n        fn: withCtx(scope => [renderSlot(_ctx.$slots, \"row-details\", mergeProps(scope, {\n          fields: computedFields.value,\n          selectRow: (index = scope.index) => exposedSelectableUtilities.selectRow(index),\n          unselectRow: (index = scope.index) => exposedSelectableUtilities.unselectRow(index),\n          rowSelected: exposedSelectableUtilities.isRowSelected(scope.index)\n        }))]),\n        key: \"3\"\n      } : void 0, slots[\"bottom-row\"] ? {\n        name: \"bottom-row\",\n        fn: withCtx(scope => [renderSlot(_ctx.$slots, \"bottom-row\", mergeProps(scope, {\n          fields: computedFields.value\n        }))]),\n        key: \"4\"\n      } : void 0, slots[\"custom-foot\"] ? {\n        name: \"custom-foot\",\n        fn: withCtx(scope => [renderSlot(_ctx.$slots, \"custom-foot\", mergeProps(scope, {\n          fields: computedFields.value\n        }))]),\n        key: \"5\"\n      } : void 0, slots[\"table-caption\"] ? {\n        name: \"table-caption\",\n        fn: withCtx(() => [renderSlot(_ctx.$slots, \"table-caption\")]),\n        key: \"6\"\n      } : void 0, renderList(dynamicCellSlots.value, name => {\n        return {\n          name,\n          fn: withCtx(scope => [renderSlot(_ctx.$slots, name, mergeProps(scope, {\n            selectRow: (index = scope.index) => exposedSelectableUtilities.selectRow(index),\n            unselectRow: (index = scope.index) => exposedSelectableUtilities.unselectRow(index),\n            rowSelected: exposedSelectableUtilities.isRowSelected(scope.index)\n          }))])\n        };\n      }), renderList(dynamicFootSlots.value, name => {\n        return {\n          name,\n          fn: withCtx(scope => [renderSlot(_ctx.$slots, name, mergeProps(scope, {\n            selectAllRows: exposedSelectableUtilities.selectAllRows,\n            clearSelected: exposedSelectableUtilities.clearSelected\n          }))])\n        };\n      }), renderList(computedFields.value, field => {\n        return {\n          name: `head(${String(field.key)})`,\n          fn: withCtx(scope => {\n            var _a, _b, _c, _d;\n            return [renderSlot(_ctx.$slots, slots[`head(${String(field.key)})`] ? `head(${String(field.key)})` : \"head()\", mergeProps(scope, {\n              selectAllRows: exposedSelectableUtilities.selectAllRows,\n              clearSelected: exposedSelectableUtilities.clearSelected\n            }), () => [createTextVNode(toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)]), isSortable.value && !!scope.field.sortable && unref(props).noSortableIcon === false ? (openBlock(), createElementBlock(Fragment, {\n              key: 0\n            }, [((_b = (_a = sortByModel.value) == null ? void 0 : _a.find(el => el.key === scope.field.key)) == null ? void 0 : _b.order) === \"asc\" ? renderSlot(_ctx.$slots, slots[`sortAsc(${String(scope.field.key)})`] ? `sortAsc(${String(scope.field.key)})` : \"sortAsc()\", normalizeProps(mergeProps({\n              key: 0\n            }, scope)), () => [_cache[5] || (_cache[5] = createElementVNode(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"24\",\n              height: \"24\",\n              fill: \"currentColor\",\n              class: \"bi bi-arrow-up-short\",\n              viewBox: \"0 0 16 16\",\n              \"aria-hidden\": \"\"\n            }, [createElementVNode(\"path\", {\n              \"fill-rule\": \"evenodd\",\n              d: \"M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z\"\n            })], -1))]) : ((_d = (_c = sortByModel.value) == null ? void 0 : _c.find(el => el.key === scope.field.key)) == null ? void 0 : _d.order) === \"desc\" ? renderSlot(_ctx.$slots, slots[`sortDesc(${String(scope.field.key)})`] ? `sortDesc(${String(scope.field.key)})` : \"sortDesc()\", normalizeProps(mergeProps({\n              key: 1\n            }, scope)), () => [_cache[6] || (_cache[6] = createElementVNode(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"24\",\n              height: \"24\",\n              fill: \"currentColor\",\n              class: \"bi bi-arrow-down-short\",\n              viewBox: \"0 0 16 16\",\n              \"aria-hidden\": \"\"\n            }, [createElementVNode(\"path\", {\n              \"fill-rule\": \"evenodd\",\n              d: \"M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z\"\n            })], -1))]) : renderSlot(_ctx.$slots, slots[`sortDefault(${String(scope.field.key)})`] ? `sortDefault(${String(scope.field.key)})` : \"sortDefault()\", normalizeProps(mergeProps({\n              key: 2\n            }, scope)), () => [(openBlock(), createElementBlock(\"svg\", _hoisted_1, _cache[7] || (_cache[7] = [createElementVNode(\"path\", {\n              \"fill-rule\": \"evenodd\",\n              d: \"M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z\"\n            }, null, -1)])))])], 64)) : createCommentVNode(\"\", true)];\n          })\n        };\n      })]), 1040, [\"aria-busy\", \"items\", \"fields\", \"table-class\"]);\n    };\n  }\n});\nexport { _sfc_main as _, _sfc_main$1 as a, _sfc_main$7 as b, _sfc_main$6 as c, _sfc_main$5 as d, _sfc_main$4 as e, _sfc_main$3 as f, _sfc_main$2 as g };","map":{"version":3,"names":["formatItem","item","fieldKey","formatter","val","get","isTableItem","value","isTableField","_props","__props","props","useDefaults","computedClasses","computed","variant","stickyColumn","scope","colspan","rowspan","getTableFieldHeadLabel","field","titleCase","label","key","TABLE_TAG_NAMES","eventFilter","join","filterEvent","event","target","el","disabled","indexOf","tagName","closest","labelFor","getAttribute","input","document","getElementById","querySelector","matches","emit","__emit","slots","useSlots","generateDetailsItem","_showDetails","detailsMap","ref","WeakMap","watch","items","forEach","set","deep","immediate","computedTableClasses","tableClass","align","computedFields","fields","length","firstItem","Array","isArray","Object","keys","map","k","startCase","tdAttr","stacked","_noHeader","f","computedFieldsTotal","showComputedHeaders","every","footerProps","footVariant","class","tfootClass","itemAttributes","attr","callThAttr","type","String","thAttr","headerClicked","isFooter","toggleRowDetails","tr","prevValue","getFieldColumnClasses","thClass","fieldColumnClass","getFieldRowClasses","tdClass","_a","_cellVariants","_b","handleMiddleClick","itemIndex","button","callTbodyTrAttrs","tbodyTrAttrs","getRowClasses","tbodyTrClass","dynamicCellSlots","filter","startsWith","dynamicFootSlots","sortByModel","useModel","busyModel","selectedItemsModel","selectedItemsToSet","Set","newValue","oldValue","from","has","selectedItemsSetUtilities","add","clear","delete","primaryKey","pkey","v","i","selectedKey","itemKey","selected","internalItems","perPageNumber","useToNumber","perPage","method","currentPageNumber","currentPage","isFilterableTable","usesProvider","provider","isSelecting","size","isSortable","some","sortable","find","sb","sortValue","order","tableClasses","selectable","getBusyRowClasses","selectionVariant","getFormatter","sortByFormatted","computedItems","sortItems","sortByItems","sort","a","b","sortOption","realVal","ob","sortField","JSON","stringify","toString","aValue","bValue","comparison","comparer","localeCompare","numeric","filterItems","entries","filterable","includes","filterField","filterByFormatted","values","itemValue","toLowerCase","_c","mappedItems","newItem","noProviderFiltering","noLocalSorting","noProviderSorting","emptySlotScope","emptyFilteredText","emptyText","computedDisplayItems","Number","isNaN","noProviderPaging","slice","POSITIVE_INFINITY","handleRowSelection","row","index","shiftClicked","ctrlClicked","metaClicked","selectMode","lastSelectedItem","pop","lastSelectedIndex","findIndex","selectStartIndex","Math","min","selectEndIndex","max","onRowClick","e","noSelectOnClick","shiftKey","ctrlKey","metaKey","handleFieldSorting","fieldSortable","resolveOrder","mustSort","originalValue","updatedValue","handleMultiSort","_a2","_b2","handleSingleSort","multisort","onFieldHeadClick","callItemsProvider","response","sortBy","Promise","providerPropsWatch","prop","oldVal","inNoProvider","noProvider","noProvideWhenPaging","noProvideWhenFiltering","noProvideWhenSorting","oldFilter","onMounted","exposedSelectableUtilities","clearSelected","selectAllRows","selectRow","unselectRow","isRowSelected","__expose","refresh"],"sources":["../src/utils/formatItem.ts","../src/types/TableTypes.ts","../src/components/BTable/BTbody.vue","../src/components/BTable/BTd.vue","../src/components/BTable/BTfoot.vue","../src/components/BTable/BTh.vue","../src/components/BTable/BThead.vue","../src/components/BTable/BTr.vue","../src/utils/getTableFieldHeadLabel.ts","../src/utils/filterEvent.ts","../src/components/BTable/BTableLite.vue","../src/components/BTable/BTable.vue"],"sourcesContent":["import type {TableFieldFormatter} from '../types/TableTypes'\nimport {get} from './object'\n\nexport const formatItem = <T>(\n  item: T,\n  // Weakly type fieldKey because it can be a nested string, such as 'foo.bar.baz'\n  fieldKey: string,\n  formatter?: TableFieldFormatter<T>\n) => {\n  const val = get(item, fieldKey)\n  return formatter && typeof formatter === 'function' ? formatter(val, fieldKey, item) : val\n}\n","import type {StyleValue} from 'vue'\nimport type {ColorVariant} from './ColorTypes'\nimport type {MaybePromise} from './MaybePromise'\nimport type {LiteralUnion} from './LiteralUnion'\nimport type {AttrsValue, ClassValue} from './AnyValuedAttributes'\n\nexport type TableRowEvent<T> = [item: T, index: number, event: MouseEvent]\n\nexport type TableItem<T = Record<string, unknown>> = T & {\n  _rowVariant?: ColorVariant | null\n  _cellVariants?: Partial<Record<keyof T, ColorVariant>>\n  _showDetails?: boolean\n}\n\nexport const isTableItem = (value: unknown): value is TableItem =>\n  typeof value === 'object' && value !== null\n\n// undefined means no sorting\nexport type BTableSortByOrder = 'desc' | 'asc' | undefined\n\nexport type BTableSortBy = {\n  order: BTableSortByOrder\n  key: string\n  comparer?: (a: string, b: string) => number\n}\n\nexport type BTableProviderContext = {\n  sortBy: BTableSortBy[] | undefined\n  filter: string | undefined\n  currentPage: number\n  perPage: number\n}\n\nexport type BTableProvider<T> = (\n  context: Readonly<BTableProviderContext>\n) => MaybePromise<T[] | undefined>\n\nexport type TableFieldFormatter<T> = (value: unknown, key: string, item: T) => string\n\nexport type TableRowType = 'row' | 'row-details' | 'row-top' | 'row-bottom' | 'table-busy'\nexport type TableRowThead = 'top' | 'bottom'\n\nexport type TableStrictClassValue = string | unknown[] | Record<string, boolean>\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type TableField<T = any> = {\n  key: LiteralUnion<keyof T>\n  label?: string\n  headerTitle?: string\n  headerAbbr?: string\n  class?: ClassValue\n  formatter?: TableFieldFormatter<T>\n  sortable?: boolean\n  sortKey?: string\n  sortDirection?: string\n  sortByFormatted?: boolean | TableFieldFormatter<T>\n  filterByFormatted?: boolean | TableFieldFormatter<T>\n  tdClass?:\n    | TableStrictClassValue\n    | ((value: unknown, key: string, item: T) => TableStrictClassValue)\n  thClass?: ClassValue\n  thStyle?: StyleValue\n  variant?: ColorVariant | null\n  tdAttr?: AttrsValue | ((value: unknown, key: string, item: T) => AttrsValue)\n  thAttr?:\n    | AttrsValue\n    | ((value: unknown, key: string, item: T | null, type: TableRowThead) => AttrsValue)\n  isRowHeader?: boolean\n  stickyColumn?: boolean\n}\n\nexport type TableFieldRaw<T = unknown> = T extends object\n  ? LiteralUnion<keyof T> | TableField<T>\n  : string | TableField\n\nexport const isTableField = <T>(value: unknown): value is TableField<T> =>\n  typeof value === 'object' && value !== null && 'key' in value\n\nexport const isTableFieldRaw = <T>(value: unknown): value is TableFieldRaw<T> =>\n  typeof value === 'string' || isTableField(value)\n\nexport type NoProviderTypes = 'paging' | 'sorting' | 'filtering'\n","<template>\n  <tbody :class=\"computedClasses\">\n    <slot />\n  </tbody>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BTbodyProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\n\nconst _props = withDefaults(defineProps<BTbodyProps>(), {\n  variant: null,\n})\nconst props = useDefaults(_props, 'BTbody')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`thead-${props.variant}`]: props.variant !== null,\n}))\n</script>\n","<template>\n  <td\n    :scope=\"scope\"\n    :class=\"computedClasses\"\n    :colspan=\"props.colspan\"\n    :rowspan=\"props.rowspan\"\n    :data-label=\"props.stackedHeading\"\n  >\n    <div v-if=\"props.stackedHeading\">\n      <slot />\n    </div>\n    <slot v-else />\n  </td>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BTdProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\n\nconst _props = withDefaults(defineProps<BTdProps>(), {\n  colspan: undefined,\n  rowspan: undefined,\n  stackedHeading: undefined,\n  stickyColumn: false,\n  variant: null,\n})\nconst props = useDefaults(_props, 'BTd')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`table-${props.variant}`]: props.variant !== null,\n  'b-table-sticky-column': props.stickyColumn,\n  'table-b-table-default': props.stickyColumn && props.variant === null,\n}))\n\nconst scope = computed(() => (props.colspan ? 'colspan' : props.rowspan ? 'rowspan' : 'col'))\n</script>\n","<template>\n  <tfoot :class=\"computedClasses\">\n    <slot />\n  </tfoot>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BTfootProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\n\nconst _props = withDefaults(defineProps<BTfootProps>(), {\n  variant: null,\n})\nconst props = useDefaults(_props, 'BTfoot')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`table-${props.variant}`]: props.variant !== null,\n}))\n</script>\n","<template>\n  <th\n    :scope=\"scope\"\n    :class=\"computedClasses\"\n    :colspan=\"props.colspan\"\n    :rowspan=\"props.rowspan\"\n    :data-label=\"props.stackedHeading\"\n  >\n    <div v-if=\"props.stackedHeading !== undefined\">\n      <slot />\n    </div>\n    <slot v-else />\n  </th>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BThProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\n\nconst _props = withDefaults(defineProps<BThProps>(), {\n  colspan: undefined,\n  rowspan: undefined,\n  stackedHeading: undefined,\n  stickyColumn: false,\n  variant: null,\n})\nconst props = useDefaults(_props, 'BTh')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`table-${props.variant}`]: props.variant !== null,\n  'b-table-sticky-column': props.stickyColumn,\n  'table-b-table-default': props.stickyColumn && props.variant === null,\n}))\n\nconst scope = computed(() => (props.colspan ? 'colspan' : props.rowspan ? 'rowspan' : 'col'))\n</script>\n","<template>\n  <thead :class=\"computedClasses\">\n    <slot />\n  </thead>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BTheadProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\n\nconst _props = withDefaults(defineProps<BTheadProps>(), {\n  variant: null,\n})\nconst props = useDefaults(_props, 'BThead')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`table-${props.variant}`]: props.variant !== null,\n}))\n</script>\n","<template>\n  <tr :class=\"computedClasses\">\n    <slot />\n  </tr>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BTrProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\n\nconst _props = withDefaults(defineProps<BTrProps>(), {\n  variant: null,\n})\nconst props = useDefaults(_props, 'BTr')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  [`table-${props.variant}`]: props.variant !== null,\n}))\n</script>\n","import {titleCase} from './stringUtils'\nimport type {TableFieldRaw} from '../types/TableTypes'\n\nexport const getTableFieldHeadLabel = (field: Readonly<TableFieldRaw<unknown>>) =>\n  typeof field === 'string'\n    ? titleCase(field)\n    : field.label !== undefined\n      ? field.label\n      : typeof field.key === 'string'\n        ? titleCase(field.key)\n        : field.key\n","const TABLE_TAG_NAMES = ['TD', 'TH', 'TR']\n\n// Filter CSS selector for click/dblclick/etc. events\n// If any of these selectors match the clicked element, we ignore the event\nconst eventFilter = [\n  'a',\n  'a *', // Include content inside links\n  'button',\n  'button *', // Include content inside buttons\n  'input:not(.disabled):not([disabled])',\n  'select:not(.disabled):not([disabled])',\n  'textarea:not(.disabled):not([disabled])',\n  '[role=\"link\"]',\n  '[role=\"link\"] *',\n  '[role=\"button\"]',\n  '[role=\"button\"] *',\n  '[tabindex]:not(.disabled):not([disabled])',\n].join(',')\n\n// Returns `true` if we should ignore the click/double-click/keypress event\n// Avoids having the user need to use `@click.stop` on the form control\nexport const filterEvent = (event: Readonly<Event>) => {\n  // Exit early when we don't have a target element\n  if (!event || !event.target) {\n    return false\n  }\n  const el = event.target as HTMLElement\n  // Exit early when element is disabled or a table element\n  if (('disabled' in el && el.disabled) || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {\n    return false\n  }\n  // Ignore the click when it was inside a dropdown menu\n  if (el.closest('.dropdown-menu')) return true\n\n  const label = el.tagName === 'LABEL' ? el : el.closest('label')\n  // If the label's form control is not disabled then we don't propagate event\n  // Modern browsers have `label.control` that references the associated input, but IE 11\n  // does not have this property on the label element, so we resort to DOM lookups\n  if (label) {\n    const labelFor = label.getAttribute('for')\n    const input = labelFor\n      ? document.getElementById(labelFor)\n      : label.querySelector('input, select, textarea')\n    if (input && !(input as HTMLInputElement).disabled) {\n      return true\n    }\n  }\n  // Otherwise check if the event target matches one of the selectors in the\n  // event filter (i.e. anchors, non disabled inputs, etc.)\n  // Return `true` if we should ignore the event\n  return el.matches(eventFilter)\n}\n","<template>\n  <BTableSimple\n    :id=\"props.id\"\n    :bordered=\"props.bordered\"\n    :borderless=\"props.borderless\"\n    :border-variant=\"props.borderVariant\"\n    :caption-top=\"props.captionTop\"\n    :dark=\"props.dark\"\n    :fixed=\"props.fixed\"\n    :hover=\"props.hover\"\n    :no-border-collapse=\"props.noBorderCollapse\"\n    :outlined=\"props.outlined\"\n    :responsive=\"props.responsive\"\n    :small=\"props.small\"\n    :stacked=\"props.stacked\"\n    :sticky-header=\"props.stickyHeader\"\n    :striped=\"props.striped\"\n    :table-class=\"computedTableClasses\"\n    :variant=\"props.variant\"\n    :striped-columns=\"props.stripedColumns\"\n  >\n    <BThead v-show=\"showComputedHeaders\" :variant=\"props.headVariant\" :class=\"props.theadClass\">\n      <slot name=\"thead-top\" :columns=\"computedFieldsTotal\" :fields=\"computedFields\" />\n      <BTr :variant=\"props.headRowVariant\" :class=\"props.theadTrClass\">\n        <BTh\n          v-for=\"field in computedFields\"\n          :key=\"field.key\"\n          scope=\"col\"\n          :class=\"getFieldColumnClasses(field)\"\n          :title=\"field.headerTitle\"\n          :variant=\"field.variant\"\n          :abbr=\"field.headerAbbr\"\n          :style=\"field.thStyle\"\n          v-bind=\"callThAttr(null, field, 'top')\"\n          @click=\"headerClicked(field, $event)\"\n        >\n          <!-- eslint-disable prettier/prettier -->\n          <slot\n            :name=\"\n              slots[`head(${String(field.key)})`]\n                ? (`head(${String(field.key)})` as 'head()')\n                : 'head()'\n            \"\n            :label=\"field.label\"\n            :column=\"field.key as LiteralUnion<keyof Items>\"\n            :field\n            :is-foot=\"false\"\n          >\n            <!-- eslint-enable prettier/prettier -->\n            {{ getTableFieldHeadLabel(field) }}\n          </slot>\n        </BTh>\n      </BTr>\n      <BTr v-if=\"slots['thead-sub']\">\n        <BTd\n          v-for=\"field in computedFields\"\n          :key=\"field.key\"\n          scope=\"col\"\n          :variant=\"field.variant\"\n          :class=\"[field.class, field.thClass]\"\n        >\n          <slot name=\"thead-sub\" :items=\"props.items\" :fields=\"computedFields\" :field>\n            {{ field.label }}\n          </slot>\n        </BTd>\n      </BTr>\n    </BThead>\n    <BTbody :class=\"props.tbodyClass\">\n      <slot\n        name=\"custom-body\"\n        :fields=\"computedFields\"\n        :items=\"props.items\"\n        :columns=\"computedFieldsTotal\"\n      >\n        <BTr\n          v-if=\"!props.stacked && slots['top-row']\"\n          :class=\"getRowClasses(null, 'row-top')\"\n          v-bind=\"callTbodyTrAttrs(null, 'row-top')\"\n        >\n          <slot name=\"top-row\" :columns=\"computedFieldsTotal\" :fields=\"computedFields\" />\n        </BTr>\n\n        <template\n          v-for=\"(item, itemIndex) in props.items\"\n          :key=\"props.primaryKey ? get(item, props.primaryKey) : itemIndex\"\n        >\n          <BTr\n            :class=\"getRowClasses(item, 'row')\"\n            :variant=\"isTableItem(item) ? item._rowVariant : undefined\"\n            v-bind=\"callTbodyTrAttrs(item, 'row')\"\n            @click=\"!filterEvent($event) && emit('row-clicked', item, itemIndex, $event)\"\n            @dblclick=\"!filterEvent($event) && emit('row-dblclicked', item, itemIndex, $event)\"\n            @contextmenu=\"!filterEvent($event) && emit('row-contextmenu', item, itemIndex, $event)\"\n            @mouseenter=\"!filterEvent($event) && emit('row-hovered', item, itemIndex, $event)\"\n            @mouseleave=\"!filterEvent($event) && emit('row-unhovered', item, itemIndex, $event)\"\n            @mousedown=\"handleMiddleClick(item, itemIndex, $event)\"\n          >\n            <BTd\n              v-for=\"field in computedFields\"\n              :key=\"field.key\"\n              :variant=\"\n                (isTableItem(item) ? item._cellVariants?.[field.key as string] : false)\n                  ? null\n                  : field.variant\n              \"\n              :class=\"getFieldRowClasses(field, item)\"\n              v-bind=\"itemAttributes(item, String(field.key), field.tdAttr)\"\n            >\n              <label v-if=\"props.stacked && props.labelStacked\" class=\"b-table-stacked-label\">\n                {{ getTableFieldHeadLabel(field) }}\n              </label>\n              <slot\n                :name=\"\n                  slots[`cell(${String(field.key)})`]\n                    ? (`cell(${String(field.key)})` as 'cell()')\n                    : 'cell()'\n                \"\n                :value=\"formatItem(item, String(field.key), field.formatter)\"\n                :unformatted=\"get(item, String(field.key))\"\n                :index=\"itemIndex\"\n                :item=\"item\"\n                :field=\"field\"\n                :items=\"items\"\n                :toggle-details=\"() => toggleRowDetails(item)\"\n                :details-showing=\"isTableItem(item) ? (detailsMap.get(item) ?? false) : false\"\n              >\n                <template v-if=\"!slots[`cell(${String(field.key)})`] && !slots['cell()']\">\n                  {{ formatItem(item, String(field.key), field.formatter) }}\n                </template>\n              </slot>\n            </BTd>\n          </BTr>\n\n          <template\n            v-if=\"isTableItem(item) && detailsMap.get(item) === true && slots['row-details']\"\n          >\n            <BTr aria-hidden=\"true\" role=\"presentation\" class=\"d-none\" />\n            <BTr\n              :class=\"getRowClasses(item, 'row-details')\"\n              :variant=\"item._rowVariant\"\n              v-bind=\"callTbodyTrAttrs(item, 'row-details')\"\n            >\n              <BTd :colspan=\"computedFieldsTotal\" :class=\"detailsTdClass\">\n                <slot\n                  name=\"row-details\"\n                  :item=\"item\"\n                  :toggle-details=\"() => toggleRowDetails(item)\"\n                  :fields=\"computedFields\"\n                  :index=\"itemIndex\"\n                />\n              </BTd>\n            </BTr>\n          </template>\n        </template>\n        <!-- This class is for specific targetting of this slot element -->\n        <BTr\n          v-if=\"!props.stacked && slots['bottom-row']\"\n          class=\"bottom-row\"\n          :class=\"getRowClasses(null, 'row-bottom')\"\n          v-bind=\"callTbodyTrAttrs(null, 'row-bottom')\"\n        >\n          <slot name=\"bottom-row\" :columns=\"computedFieldsTotal\" :fields=\"computedFields\" />\n        </BTr>\n      </slot>\n    </BTbody>\n    <BTfoot v-if=\"props.footClone\" v-bind=\"footerProps\">\n      <BTr :variant=\"props.footRowVariant\" :class=\"props.tfootTrClass\">\n        <BTh\n          v-for=\"field in computedFields\"\n          :key=\"field.key\"\n          scope=\"col\"\n          :class=\"getFieldColumnClasses(field)\"\n          :title=\"field.headerTitle\"\n          :abbr=\"field.headerAbbr\"\n          :style=\"field.thStyle\"\n          :variant=\"field.variant\"\n          v-bind=\"callThAttr(null, field, 'bottom')\"\n          @click=\"headerClicked(field, $event, true)\"\n        >\n          <div class=\"d-inline-flex flex-nowrap align-items-center gap-1\">\n            <div>\n              <!-- eslint-disable prettier/prettier -->\n              <slot\n                :name=\"\n                  slots[`foot(${String(field.key)})`]\n                    ? (`foot(${String(field.key)})` as 'foot()')\n                    : 'foot()'\n                \"\n                :label=\"field.label\"\n                :column=\"field.key as LiteralUnion<keyof Items>\"\n                :field=\"field\"\n                :is-foot=\"true\"\n              >\n                <!-- eslint-enable prettier/prettier -->\n                {{ getTableFieldHeadLabel(field) }}\n              </slot>\n            </div>\n          </div>\n        </BTh>\n      </BTr>\n    </BTfoot>\n    <BTfoot v-else-if=\"slots['custom-foot']\" v-bind=\"footerProps\">\n      <slot\n        name=\"custom-foot\"\n        :fields=\"computedFields\"\n        :items=\"props.items\"\n        :columns=\"computedFieldsTotal\"\n      />\n    </BTfoot>\n    <caption v-if=\"slots['table-caption'] || props.caption\">\n      <slot name=\"table-caption\">\n        {{ props.caption }}\n      </slot>\n    </caption>\n  </BTableSimple>\n</template>\n\n<script setup lang=\"ts\" generic=\"Items\">\nimport {computed, ref, watch} from 'vue'\nimport type {BTableLiteProps} from '../../types/ComponentProps'\nimport {\n  isTableField,\n  isTableItem,\n  type TableField,\n  type TableItem,\n  type TableRowEvent,\n  type TableRowThead,\n  type TableRowType,\n} from '../../types/TableTypes'\nimport BTableSimple from './BTableSimple.vue'\nimport BTbody from './BTbody.vue'\nimport BTd from './BTd.vue'\nimport BTfoot from './BTfoot.vue'\nimport BTh from './BTh.vue'\nimport BThead from './BThead.vue'\nimport BTr from './BTr.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {get} from '../../utils/object'\nimport {getTableFieldHeadLabel} from '../../utils/getTableFieldHeadLabel'\nimport {formatItem} from '../../utils/formatItem'\nimport {filterEvent} from '../../utils/filterEvent'\nimport {startCase} from '../../utils/stringUtils'\nimport type {LiteralUnion} from '../../types/LiteralUnion'\n\nconst _props = withDefaults(defineProps<BTableLiteProps<Items>>(), {\n  caption: undefined,\n  align: undefined,\n  fields: () => [],\n  footClone: false,\n  items: () => [],\n  labelStacked: false,\n  fieldColumnClass: undefined,\n  tbodyTrClass: undefined,\n  detailsTdClass: undefined,\n  headVariant: undefined,\n  headRowVariant: undefined,\n  footRowVariant: undefined,\n  footVariant: undefined,\n  modelValue: undefined,\n  primaryKey: undefined,\n  tbodyClass: undefined,\n  tbodyTrAttrs: undefined,\n  tfootClass: undefined,\n  tfootTrClass: undefined,\n  theadClass: undefined,\n  theadTrClass: undefined,\n  // BTableSimpleProps props\n  borderVariant: undefined,\n  tableClass: undefined,\n  variant: undefined,\n  bordered: undefined,\n  borderless: undefined,\n  captionTop: undefined,\n  dark: undefined,\n  hover: undefined,\n  id: undefined,\n  noBorderCollapse: undefined,\n  outlined: undefined,\n  fixed: undefined,\n  responsive: undefined,\n  stacked: undefined,\n  striped: undefined,\n  stripedColumns: undefined,\n  small: undefined,\n  stickyHeader: undefined,\n  // End BTableSimpleProps props\n})\nconst props = useDefaults(_props, 'BTableLite')\n\nconst emit = defineEmits<{\n  'head-clicked': [\n    key: string,\n    field: (typeof computedFields.value)[0],\n    event: MouseEvent,\n    isFooter: boolean,\n  ]\n  'row-clicked': TableRowEvent<Items>\n  'row-dblclicked': TableRowEvent<Items>\n  'row-contextmenu': TableRowEvent<Items>\n  'row-hovered': TableRowEvent<Items>\n  'row-unhovered': TableRowEvent<Items>\n  'row-middle-clicked': TableRowEvent<Items>\n}>()\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'thead-top'?: (props: {columns: number; fields: typeof computedFields.value}) => any\n  [key: `head(${string})`]: (props: {\n    label: string | undefined\n    column: LiteralUnion<keyof Items>\n    field: (typeof computedFields.value)[0]\n    isFoot: false\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  'thead-sub'?: (\n    props: {\n      items: readonly Items[]\n      fields: typeof computedFields.value\n      field: (typeof computedFields.value)[0]\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => any\n  'custom-body'?: (props: {\n    fields: typeof computedFields.value\n    items: readonly Items[]\n    columns: number\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'top-row'?: (props: {columns: number; fields: typeof computedFields.value}) => any\n  [key: `cell(${string})`]: (props: {\n    value: unknown\n    unformatted: unknown\n    index: number\n    item: Items\n    field: (typeof computedFields.value)[0]\n    items: readonly Items[]\n    toggleDetails: () => void\n    detailsShowing: boolean\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  'row-details'?: (props: {\n    item: Items\n    toggleDetails: () => void\n    fields: typeof computedFields.value\n    index: number\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'bottom-row'?: (props: {columns: number; fields: typeof computedFields.value}) => any\n  [key: `foot(${string})`]: (props: {\n    label: string | undefined\n    column: LiteralUnion<keyof Items>\n    field: (typeof computedFields.value)[0]\n    isFoot: true\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  'custom-foot'?: (props: {\n    fields: typeof computedFields.value\n    items: readonly Items[]\n    columns: number\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'table-caption'?: (props: Record<string, never>) => any\n}>()\n\nconst generateDetailsItem = (item: TableItem): [object, boolean | undefined] => [\n  item,\n  item._showDetails,\n]\nconst detailsMap = ref(new WeakMap<object, boolean | undefined>())\nwatch(\n  () => props.items,\n  (items) => {\n    items.forEach((item) => {\n      if (!isTableItem(item)) return\n      detailsMap.value.set(...generateDetailsItem(item))\n    })\n  },\n  {deep: true, immediate: true}\n)\n\nconst computedTableClasses = computed(() => [\n  props.tableClass,\n  {\n    [`align-${props.align}`]: props.align !== undefined,\n  },\n])\n\nconst computedFields = computed<(TableField<Items> & {_noHeader?: true})[]>(() => {\n  if (!props.fields.length && props.items.length) {\n    const [firstItem] = props.items\n    if (isTableItem(firstItem) || Array.isArray(firstItem)) {\n      return Object.keys(firstItem).map((k) => {\n        const label = startCase(k)\n        return {\n          key: k,\n          label,\n          tdAttr: props.stacked === true ? {'data-label': label} : undefined,\n        }\n      })\n    }\n    // The items are primitives, so we just return a single empty field\n    // No header will be shown, as we don't know what to show\n    return [{key: '', _noHeader: true}]\n  }\n\n  return props.fields.map((f) => {\n    if (isTableField(f)) {\n      return {\n        ...(f as TableField<Items>),\n        tdAttr:\n          props.stacked === true\n            ? {'data-label': startCase(f.key as string), ...f.tdAttr}\n            : f.tdAttr,\n      }\n    }\n    const label = startCase(f as string)\n    return {\n      key: f as string,\n      label,\n      tdAttr: props.stacked === true ? {'data-label': label} : undefined,\n    }\n  })\n})\nconst computedFieldsTotal = computed(() => computedFields.value.length)\nconst showComputedHeaders = computed(() => {\n  // We only hide the header if all fields have _noHeader set to true. Which would be our doing\n  // This usually happens under a circumstance of displaying an array of primitives\n  // Under any other circumstance, I'm not sure how this would apply\n  if (computedFieldsTotal.value > 0 && computedFields.value.every((el) => el._noHeader === true))\n    return false\n  return true\n})\n\nconst footerProps = computed(() => ({\n  variant: props.footVariant,\n  class: props.tfootClass,\n}))\n\nconst itemAttributes = (item: Items, fieldKey: string, attr?: unknown) => {\n  const val = get(item, fieldKey)\n  return attr && typeof attr === 'function' ? attr(val, fieldKey, item) : attr\n}\n\nconst callThAttr = (item: Items | null, field: TableField<Items>, type: TableRowThead) => {\n  const fieldKey = String(field.key)\n  const val = get(item, fieldKey)\n  return field.thAttr && typeof field.thAttr === 'function'\n    ? field.thAttr(val, fieldKey, item, type)\n    : field.thAttr\n}\n\nconst headerClicked = (field: TableField<Items>, event: Readonly<MouseEvent>, isFooter = false) => {\n  emit('head-clicked', field.key as string, field, event, isFooter)\n}\n\nconst toggleRowDetails = (tr: Items) => {\n  if (isTableItem(tr)) {\n    const prevValue = detailsMap.value.get(tr)\n    detailsMap.value.set(tr, !prevValue)\n    tr._showDetails = !prevValue\n  }\n}\n\nconst getFieldColumnClasses = (field: TableField) => [\n  field.class,\n  field.thClass,\n  {\n    'b-table-sticky-column': field.stickyColumn,\n  },\n  props.fieldColumnClass\n    ? typeof props.fieldColumnClass === 'function'\n      ? props.fieldColumnClass(field)\n      : props.fieldColumnClass\n    : null,\n]\n\nconst getFieldRowClasses = (field: Readonly<TableField>, tr: Items) => {\n  const val = get(tr, String(field.key))\n  return [\n    field.class,\n    typeof field.tdClass === 'function' ? field.tdClass(val, String(field.key), tr) : field.tdClass,\n    (isTableItem(tr) ? tr._cellVariants?.[field.key as string] : false)\n      ? `table-${(tr as TableItem)._cellVariants?.[field.key as string]}`\n      : null,\n    {\n      'b-table-sticky-column': field.stickyColumn,\n    },\n  ]\n}\n\nconst handleMiddleClick = (item: Items, itemIndex: number, event: MouseEvent) => {\n  if (event.button === 1 && !filterEvent(event)) {\n    emit('row-middle-clicked', item, itemIndex, event)\n  }\n}\nconst callTbodyTrAttrs = (item: Items | null, type: TableRowType) =>\n  props.tbodyTrAttrs\n    ? typeof props.tbodyTrAttrs === 'function'\n      ? props.tbodyTrAttrs(item, type)\n      : props.tbodyTrAttrs\n    : null\n\nconst getRowClasses = (item: Items | null, type: TableRowType) =>\n  props.tbodyTrClass\n    ? typeof props.tbodyTrClass === 'function'\n      ? props.tbodyTrClass(item, type)\n      : props.tbodyTrClass\n    : null\n</script>\n","<template>\n  <!-- eslint-disable prettier/prettier -->\n  <BTableLite\n    v-bind=\"props\"\n    :aria-busy=\"busyModel\"\n    :items=\"computedDisplayItems\"\n    :fields=\"computedFields as TableFieldRaw<Items>[]\"\n    :table-class=\"tableClasses\"\n    :tbody-tr-class=\"getRowClasses\"\n    :field-column-class=\"getFieldColumnClasses\"\n    @head-clicked=\"onFieldHeadClick\"\n    @row-clicked=\"onRowClick\"\n    @row-dblclicked=\"\n      (row, index, e) => {\n        emit('row-dblclicked', row, index, e)\n      }\n    \"\n    @row-contextmenu=\"\n      (row, index, e) => {\n        emit('row-contextmenu', row, index, e)\n      }\n    \"\n    @row-hovered=\"\n      (row, index, e) => {\n        emit('row-hovered', row, index, e)\n      }\n    \"\n    @row-unhovered=\"\n      (row, index, e) => {\n        emit('row-unhovered', row, index, e)\n      }\n    \"\n    @row-middle-clicked=\"\n      (row, index, e) => {\n        emit('row-middle-clicked', row, index, e)\n      }\n    \"\n  >\n    <!-- eslint-enable prettier/prettier -->\n    <template v-if=\"slots['thead-top']\" #thead-top=\"scope\">\n      <slot\n        name=\"thead-top\"\n        v-bind=\"scope\"\n        :clear-selected=\"exposedSelectableUtilities.clearSelected\"\n        :select-all-rows=\"exposedSelectableUtilities.selectAllRows\"\n        :fields=\"computedFields\"\n      />\n    </template>\n    <template v-if=\"slots['thead-sub']\" #thead-sub=\"scope\">\n      <slot name=\"thead-sub\" v-bind=\"scope\" :fields=\"computedFields\" />\n    </template>\n    <template v-if=\"slots['top-row']\" #top-row=\"scope\">\n      <slot name=\"top-row\" v-bind=\"scope\" :fields=\"computedFields\" />\n    </template>\n    <template v-if=\"slots['row-details']\" #row-details=\"scope\">\n      <slot\n        name=\"row-details\"\n        v-bind=\"scope\"\n        :fields=\"computedFields\"\n        :select-row=\"(index = scope.index) => exposedSelectableUtilities.selectRow(index)\"\n        :unselect-row=\"(index = scope.index) => exposedSelectableUtilities.unselectRow(index)\"\n        :row-selected=\"exposedSelectableUtilities.isRowSelected(scope.index)\"\n      />\n    </template>\n    <template v-if=\"slots['bottom-row']\" #bottom-row=\"scope\">\n      <slot name=\"bottom-row\" v-bind=\"scope\" :fields=\"computedFields\" />\n    </template>\n    <template v-if=\"slots['custom-foot']\" #custom-foot=\"scope\">\n      <slot name=\"custom-foot\" v-bind=\"scope\" :fields=\"computedFields\" />\n    </template>\n    <template v-if=\"slots['table-caption']\" #table-caption>\n      <slot name=\"table-caption\" />\n    </template>\n    <template v-for=\"name in dynamicCellSlots\" #[name]=\"scope\">\n      <slot\n        :name\n        v-bind=\"scope\"\n        :select-row=\"(index = scope.index) => exposedSelectableUtilities.selectRow(index)\"\n        :unselect-row=\"(index = scope.index) => exposedSelectableUtilities.unselectRow(index)\"\n        :row-selected=\"exposedSelectableUtilities.isRowSelected(scope.index)\"\n      />\n    </template>\n    <template v-for=\"name in dynamicFootSlots\" #[name]=\"scope\">\n      <slot\n        :name\n        v-bind=\"scope\"\n        :select-all-rows=\"exposedSelectableUtilities.selectAllRows\"\n        :clear-selected=\"exposedSelectableUtilities.clearSelected\"\n      />\n    </template>\n\n    <template\n      v-for=\"field in computedFields\"\n      :key=\"field.key\"\n      #[`head(${String(field.key)})`]=\"scope\"\n    >\n      <slot\n        :name=\"\n          slots[`head(${String(field.key)})`]\n            ? (`head(${String(field.key)})` as 'head()')\n            : 'head()'\n        \"\n        v-bind=\"scope\"\n        :select-all-rows=\"exposedSelectableUtilities.selectAllRows\"\n        :clear-selected=\"exposedSelectableUtilities.clearSelected\"\n      >\n        {{ getTableFieldHeadLabel(field) }}\n      </slot>\n      <template v-if=\"isSortable && !!scope.field.sortable && props.noSortableIcon === false\">\n        <slot\n          v-if=\"sortByModel?.find((el) => el.key === scope.field.key)?.order === 'asc'\"\n          v-bind=\"scope\"\n          :name=\"\n            slots[`sortAsc(${String(scope.field.key)})`]\n              ? (`sortAsc(${String(scope.field.key)})` as 'sortAsc()')\n              : 'sortAsc()'\n          \"\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            fill=\"currentColor\"\n            class=\"bi bi-arrow-up-short\"\n            viewBox=\"0 0 16 16\"\n            aria-hidden\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z\"\n            />\n          </svg>\n        </slot>\n        <slot\n          v-else-if=\"sortByModel?.find((el) => el.key === scope.field.key)?.order === 'desc'\"\n          v-bind=\"scope\"\n          :name=\"\n            slots[`sortDesc(${String(scope.field.key)})`]\n              ? (`sortDesc(${String(scope.field.key)})` as 'sortDesc()')\n              : 'sortDesc()'\n          \"\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            fill=\"currentColor\"\n            class=\"bi bi-arrow-down-short\"\n            viewBox=\"0 0 16 16\"\n            aria-hidden\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z\"\n            />\n          </svg>\n        </slot>\n        <slot\n          v-else\n          v-bind=\"scope\"\n          :name=\"\n            slots[`sortDefault(${String(scope.field.key)})`]\n              ? (`sortDefault(${String(scope.field.key)})` as 'sortDefault()')\n              : 'sortDefault()'\n          \"\n        >\n          <svg\n            :style=\"{opacity: 0.4}\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            fill=\"currentColor\"\n            class=\"bi bi-arrow-up-short\"\n            viewBox=\"0 0 16 16\"\n            aria-hidden\n          >\n            <path\n              fill-rule=\"evenodd\"\n              d=\"M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z\"\n            />\n          </svg>\n        </slot>\n      </template>\n    </template>\n    <template #custom-body=\"scope\">\n      <BTr\n        v-if=\"busyModel && slots['table-busy']\"\n        class=\"b-table-busy-slot\"\n        :class=\"getBusyRowClasses\"\n      >\n        <BTd :colspan=\"scope.fields.length\">\n          <slot name=\"table-busy\" />\n        </BTd>\n      </BTr>\n\n      <BTr\n        v-else-if=\"props.showEmpty === true && computedItems.length === 0\"\n        class=\"b-table-empty-row\"\n      >\n        <BTd :colspan=\"computedFields.length\">\n          <div role=\"alert\" aria-live=\"polite\">\n            <div class=\"text-center my-2\">\n              <slot v-if=\"isFilterableTable\" name=\"empty-filtered\" v-bind=\"emptySlotScope\">\n                {{ props.emptyFilteredText }}\n              </slot>\n              <slot v-else name=\"empty\" v-bind=\"emptySlotScope\">\n                {{ props.emptyText }}\n              </slot>\n            </div>\n          </div>\n        </BTd>\n      </BTr>\n    </template>\n  </BTableLite>\n</template>\n\n<script setup lang=\"ts\" generic=\"Items\">\nimport {useToNumber} from '@vueuse/core'\nimport {computed, onMounted, type Ref, ref, watch} from 'vue'\nimport {formatItem} from '../../utils/formatItem'\nimport BTableLite from './BTableLite.vue'\nimport BTd from './BTd.vue'\nimport BTr from './BTr.vue'\nimport {\n  type BTableSortBy,\n  type BTableSortByOrder,\n  isTableField,\n  isTableItem,\n  type NoProviderTypes,\n  type TableField,\n  type TableFieldFormatter,\n  type TableFieldRaw,\n  type TableItem,\n  type TableRowEvent,\n  type TableRowType,\n  type TableStrictClassValue,\n} from '../../types/TableTypes'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BTableProps} from '../../types/ComponentProps'\nimport {get, set} from '../../utils/object'\nimport {startCase} from '../../utils/stringUtils'\nimport {getTableFieldHeadLabel} from '../../utils/getTableFieldHeadLabel'\nimport type {LiteralUnion} from '../../types/LiteralUnion'\n\nconst _props = withDefaults(\n  defineProps<Omit<BTableProps<Items>, 'sortBy' | 'busy' | 'selectedItems'>>(),\n  {\n    noSortableIcon: false,\n    perPage: Number.POSITIVE_INFINITY,\n    filter: undefined,\n    mustSort: false,\n    filterable: undefined,\n    provider: undefined,\n    noProvider: undefined,\n    noProviderPaging: false,\n    noProviderSorting: false,\n    multisort: false,\n    noProviderFiltering: false,\n    noLocalSorting: false,\n    noSelectOnClick: false,\n    selectable: false,\n    stickySelect: false,\n    selectHead: true,\n    selectMode: 'multi',\n    selectionVariant: 'primary',\n    busyLoadingText: 'Loading...',\n    currentPage: 1,\n    // BTableLite props\n    items: () => [],\n    fields: () => [],\n    // All others use defaults\n    caption: undefined,\n    align: undefined,\n    footClone: undefined,\n    labelStacked: undefined,\n    showEmpty: false,\n    emptyText: 'There are no records to show',\n    emptyFilteredText: 'There are no records matching your request',\n    fieldColumnClass: undefined,\n    tbodyTrClass: undefined,\n    detailsTdClass: undefined,\n    headVariant: undefined,\n    headRowVariant: undefined,\n    footRowVariant: undefined,\n    footVariant: undefined,\n    modelValue: undefined,\n    primaryKey: undefined,\n    tbodyClass: undefined,\n    tfootClass: undefined,\n    tfootTrClass: undefined,\n    theadClass: undefined,\n    theadTrClass: undefined,\n    // End BTableLite props\n    // BTableSimple props\n    borderVariant: undefined,\n    variant: undefined,\n    bordered: undefined,\n    borderless: undefined,\n    captionTop: undefined,\n    dark: undefined,\n    hover: undefined,\n    id: undefined,\n    noBorderCollapse: undefined,\n    outlined: undefined,\n    fixed: undefined,\n    responsive: undefined,\n    stacked: undefined,\n    striped: undefined,\n    stripedColumns: undefined,\n    small: undefined,\n    stickyHeader: undefined,\n    // End BTableSimple props\n  }\n)\nconst props = useDefaults(_props, 'BTable')\n\nconst emit = defineEmits<{\n  'filtered': [value: Items[]]\n  'head-clicked': [\n    key: string,\n    field: (typeof computedFields.value)[0],\n    event: MouseEvent,\n    isFooter: boolean,\n  ]\n  'row-clicked': TableRowEvent<Items>\n  'row-dblclicked': TableRowEvent<Items>\n  'row-contextmenu': TableRowEvent<Items>\n  'row-hovered': TableRowEvent<Items>\n  'row-unhovered': TableRowEvent<Items>\n  'row-middle-clicked': TableRowEvent<Items>\n  'row-selected': [value: Items]\n  'row-unselected': [value: Items]\n  'sorted': [value: BTableSortBy]\n  'change': [value: Items[]]\n}>()\n\ntype SortSlotScope = {\n  label: string | undefined\n  column: LiteralUnion<keyof Items>\n  field: (typeof computedFields.value)[0]\n  isFoot: false\n}\n\nconst slots = defineSlots<{\n  // BTableLite\n  'thead-top'?: (props: {\n    columns: number\n    fields: typeof computedFields.value\n    selectAllRows: () => void\n    clearSelected: () => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  [key: `head(${string})`]: (props: {\n    label: string | undefined\n    column: LiteralUnion<keyof Items>\n    field: (typeof computedFields.value)[0]\n    isFoot: false\n    selectAllRows: () => void\n    clearSelected: () => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  'thead-sub'?: (\n    props: {\n      items: readonly Items[]\n      fields: typeof computedFields.value\n      field: (typeof computedFields.value)[0]\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'top-row'?: (props: {columns: number; fields: typeof computedFields.value}) => any\n  [key: `cell(${string})`]: (props: {\n    value: unknown\n    unformatted: unknown\n    index: number\n    item: Items\n    field: (typeof computedFields.value)[0]\n    items: readonly Items[]\n    toggleDetails: () => void\n    detailsShowing: boolean\n    rowSelected: boolean\n    selectRow: (index?: number) => void\n    unselectRow: (index?: number) => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  'row-details'?: (props: {\n    item: Items\n    toggleDetails: () => void\n    fields: typeof computedFields.value\n    index: number\n    rowSelected: boolean\n    selectRow: (index?: number) => void\n    unselectRow: (index?: number) => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'bottom-row'?: (props: {columns: number; fields: typeof computedFields.value}) => any\n\n  [key: `foot(${string})`]: (props: {\n    label: string | undefined\n    column: LiteralUnion<keyof Items>\n    field: (typeof computedFields.value)[0]\n    isFoot: true\n    selectAllRows: () => void\n    clearSelected: () => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  'custom-foot'?: (props: {\n    fields: typeof computedFields.value\n    items: readonly Items[]\n    columns: number\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'table-caption'?: (props: Record<string, never>) => any\n\n  // end btable slots\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: `sortAsc(${string})`]: (props: SortSlotScope) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: `sortDesc(${string})`]: (props: SortSlotScope) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: `sortDefault(${string})`]: (props: SortSlotScope) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'table-busy'?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'empty-filtered'?: (props: typeof emptySlotScope.value) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'empty'?: (props: typeof emptySlotScope.value) => any\n}>()\n\nconst dynamicCellSlots = computed(\n  () => Object.keys(slots).filter((key) => key.startsWith('cell(')) as 'cell()'[]\n)\nconst dynamicFootSlots = computed(\n  () => Object.keys(slots).filter((key) => key.startsWith('foot(')) as 'foot()'[]\n)\n\nconst sortByModel = defineModel<BTableProps<Items>['sortBy']>('sortBy', {\n  default: undefined,\n})\nconst busyModel = defineModel<Exclude<BTableProps<Items>['busy'], undefined>>('busy', {\n  default: false,\n})\nconst selectedItemsModel = defineModel<Exclude<BTableProps<Items>['selectedItems'], undefined>>(\n  'selectedItems',\n  {\n    default: () => [],\n  }\n)\n\nconst selectedItemsToSet = computed({\n  get: () => new Set([...selectedItemsModel.value]),\n  set: (val) => {\n    selectedItemsModel.value = [...val]\n  },\n})\n\nwatch(selectedItemsToSet, (newValue, oldValue) => {\n  Array.from(oldValue)\n    .filter((item) => !newValue.has(item))\n    .forEach((item) => {\n      emit('row-unselected', item)\n    })\n  Array.from(newValue)\n    .filter((item) => !oldValue.has(item))\n    .forEach((item) => {\n      emit('row-selected', item)\n    })\n})\n/**\n * This is to avoid the issue of directly mutating the array structure and to properly trigger the computed setter.\n * The utils also conveniently emit the proper events after\n */\nconst selectedItemsSetUtilities = {\n  add: (item: Items) => {\n    const value = new Set(selectedItemsToSet.value)\n    value.add(item)\n    selectedItemsToSet.value = value\n  },\n  clear: () => {\n    selectedItemsToSet.value.forEach((item) => {\n      selectedItemsSetUtilities.delete(item)\n    })\n  },\n  delete: (item: Items) => {\n    const value = new Set(selectedItemsToSet.value)\n    if (props.primaryKey) {\n      const pkey: string = props.primaryKey\n      selectedItemsModel.value.forEach((v, i) => {\n        const selectedKey = get(v, pkey)\n        const itemKey = get(item, pkey)\n\n        if (!!selectedKey && !!itemKey && selectedKey === itemKey) {\n          value.delete(selectedItemsModel.value[i])\n        }\n      })\n    } else {\n      value.delete(item)\n    }\n    selectedItemsToSet.value = value\n  },\n  set: (items: Items[]) => {\n    selectedItemsToSet.value = new Set(items)\n  },\n  has: (item: Items) => {\n    if (!props.primaryKey) return selectedItemsToSet.value.has(item)\n\n    // Resolver for when we are using primary keys\n    const pkey: string = props.primaryKey\n    for (const selected of selectedItemsToSet.value) {\n      const selectedKey = get(selected, pkey)\n      const itemKey = get(item, pkey)\n\n      if (!!selectedKey && !!itemKey && selectedKey === itemKey) return true\n    }\n    return false\n  },\n} as const\n\n/**\n * Only stores data that is fetched when using the provider\n */\nconst internalItems: Ref<Items[]> = ref([])\n\nconst perPageNumber = useToNumber(() => props.perPage, {method: 'parseInt'})\nconst currentPageNumber = useToNumber(() => props.currentPage, {method: 'parseInt'})\n\nconst isFilterableTable = computed(() => !!props.filter)\nconst usesProvider = computed(() => props.provider !== undefined)\nconst isSelecting = computed(() => selectedItemsToSet.value.size > 0)\n\nconst isSortable = computed(\n  () =>\n    sortByModel.value !== undefined ||\n    props.fields.some(\n      (field) => typeof field === 'object' && field !== null && field.sortable === true\n    )\n)\n\nconst computedFields = computed<TableField<Items>[]>(() =>\n  props.fields.map((el) => {\n    if (!isTableField<Items>(el)) {\n      const label = startCase(el as string)\n      return {\n        key: el as string,\n        label,\n        tdAttr: props.stacked === true ? {'data-label': label} : undefined,\n      }\n    }\n\n    const value = sortByModel.value?.find((sb) => el.key === sb.key)\n    const sortValue =\n      isSortable.value === false\n        ? undefined\n        : value === undefined\n          ? 'none'\n          : value.order === 'desc'\n            ? 'descending'\n            : value.order === 'asc'\n              ? 'ascending'\n              : 'none'\n\n    return {\n      ...(el as TableField<Items>),\n      thAttr: {\n        'aria-sort': sortValue,\n        ...el.thAttr,\n      },\n    }\n  })\n)\n\nconst tableClasses = computed(() => ({\n  'b-table-busy': busyModel.value,\n  'b-table-selectable': props.selectable,\n  'user-select-none': props.selectable && isSelecting.value,\n}))\n\nconst getBusyRowClasses = computed(() => [\n  props.tbodyTrClass\n    ? typeof props.tbodyTrClass === 'function'\n      ? props.tbodyTrClass(null, 'table-busy')\n      : props.tbodyTrClass\n    : null,\n])\nconst getFieldColumnClasses = (field: TableField) => [\n  {\n    'b-table-sortable-column': isSortable.value && field.sortable,\n  },\n]\n// TODO this class has issues if the table has a variant already applied\n// Also the row should technically have aria-selected . Both things could probably just use a function with tbodyTrAttrs\n// But functional tbodyTrAttrs are not supported yet\n// Also the stuff for resolving functions could probably be made a util\nconst getRowClasses = (item: Items | null, type: TableRowType): TableStrictClassValue => [\n  {\n    [`selected table-${props.selectionVariant}`]:\n      props.selectable && !!item && selectedItemsSetUtilities.has(item),\n  },\n  props.tbodyTrClass\n    ? typeof props.tbodyTrClass === 'function'\n      ? props.tbodyTrClass(item, type)\n      : props.tbodyTrClass\n    : null,\n]\n\nconst getFormatter = (value: TableField<Items>): TableFieldFormatter<Items> | undefined =>\n  typeof value.sortByFormatted === 'function' ? value.sortByFormatted : value.formatter\nconst computedItems = computed<Items[]>(() => {\n  const sortItems = (items: Items[]) => {\n    // \"undefined\" values are set by us, we do this so we dont wipe out the comparer\n    const sortByItems = sortByModel.value?.filter((el) => !!el.order)\n\n    if (!sortByItems || sortByItems.length === 0) return items\n\n    // Multi-sort\n    return [...items].sort((a, b) => {\n      for (let i = 0; i < (sortByItems.length ?? 0); i++) {\n        const sortOption = sortByItems[i]\n        const realVal = (ob: Items): string => {\n          if (!isTableItem(ob)) return String(ob)\n\n          const sortField = computedFields.value.find((el) => {\n            if (isTableField<Items>(el)) return el.key === sortOption.key\n\n            return false\n          })\n          const val = get(ob, sortOption.key as keyof TableItem)\n          if (isTableField<Items>(sortField) && !!sortField.sortByFormatted) {\n            const formatter = getFormatter(sortField)\n            if (formatter) {\n              return String(formatItem(ob, String(sortField.key), formatter))\n            }\n          }\n          return typeof val === 'object' && val !== null\n            ? JSON.stringify(val)\n            : (val?.toString() ?? '')\n        }\n\n        const aValue = realVal(a)\n        const bValue = realVal(b)\n        const comparison = sortOption.comparer\n          ? sortOption.comparer(aValue, bValue)\n          : aValue.localeCompare(bValue, undefined, {numeric: true})\n\n        if (comparison !== 0) {\n          return sortOption.order === 'asc' ? comparison : -comparison\n        }\n      }\n      return 0 // items are equal\n    })\n  }\n\n  const filterItems = (items: Items[]) =>\n    items.filter((item) =>\n      isTableItem(item)\n        ? Object.entries(item).some(([key, val]) => {\n            if (\n              val === null ||\n              val === undefined ||\n              key[0] === '_' ||\n              (!props.filterable?.includes(key) && !!props.filterable?.length)\n            )\n              return false\n            const realVal = (): string => {\n              const filterField = computedFields.value.find((el) => {\n                if (isTableField<Items>(el)) return el.key === key\n\n                return false\n              })\n              if (isTableField<Items>(filterField) && !!filterField.filterByFormatted) {\n                const formatter = getFormatter(filterField)\n                if (formatter) {\n                  return String(formatter(val, String(filterField.key), item))\n                }\n              }\n              return typeof val === 'object' ? JSON.stringify(Object.values(val)) : val.toString()\n            }\n            const itemValue: string = realVal()\n            return itemValue.toLowerCase().includes(props.filter?.toLowerCase() ?? '')\n          })\n        : true\n    )\n\n  let mappedItems = usesProvider.value ? internalItems.value : (props.items as Items[])\n  mappedItems = mappedItems.map((item) => {\n    if (\n      typeof item === 'object' &&\n      item !== null &&\n      Object.keys(item).some((key) => key.includes('.'))\n    ) {\n      // We use any here because the TS doesn't isn't certain that \"item\" is the same type as our newItem.\n      // But we've determined that it's an object, so we can ignore it since they will always be the same \"object\"\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let newItem: any = {}\n      for (const key in item) {\n        if (key.includes('.')) {\n          newItem = set(newItem, key, item[key])\n        } else {\n          newItem[key] = item[key]\n        }\n      }\n      return newItem\n      // return\n    }\n    return item\n  })\n\n  if (\n    (isFilterableTable.value === true && !usesProvider.value) ||\n    (isFilterableTable.value === true && usesProvider.value && props.noProviderFiltering)\n  ) {\n    mappedItems = filterItems(mappedItems)\n  }\n\n  if (\n    (isSortable.value === true && !usesProvider.value && !props.noLocalSorting) ||\n    (isSortable.value === true && usesProvider.value && props.noProviderSorting)\n  ) {\n    mappedItems = sortItems(mappedItems)\n  }\n\n  return mappedItems\n})\n\nconst emptySlotScope = computed(() => ({\n  emptyFilteredText: props.emptyFilteredText,\n  emptyText: props.emptyText,\n  fields: computedFields.value,\n  items: computedItems.value,\n}))\n\nconst computedDisplayItems = computed<Items[]>(() => {\n  if (Number.isNaN(perPageNumber.value) || (usesProvider.value && !props.noProviderPaging)) {\n    return computedItems.value\n  }\n\n  return computedItems.value.slice(\n    (currentPageNumber.value - 1) * (perPageNumber.value || Number.POSITIVE_INFINITY),\n    currentPageNumber.value * (perPageNumber.value || Number.POSITIVE_INFINITY)\n  )\n})\n\nwatch(computedDisplayItems, (v) => {\n  emit('change', v)\n})\n\nconst handleRowSelection = (\n  row: Items,\n  index: number,\n  shiftClicked = false,\n  ctrlClicked = false,\n  metaClicked = false\n) => {\n  if (!props.selectable) return\n\n  if (props.selectMode === 'single' || props.selectMode === 'multi') {\n    // Do nothing when these items are held\n    if (shiftClicked || ctrlClicked) return\n    // Delete if item is in\n    if (selectedItemsSetUtilities.has(row)) {\n      selectedItemsSetUtilities.delete(row)\n    } else {\n      if (props.selectMode === 'single') {\n        selectedItemsSetUtilities.set([row])\n      } else {\n        selectedItemsSetUtilities.add(row)\n      }\n    }\n  } else {\n    if (ctrlClicked || metaClicked) {\n      // Delete if in the object\n      if (selectedItemsSetUtilities.has(row)) {\n        selectedItemsSetUtilities.delete(row)\n        // Otherwise add. Functions similarly to 'multi' at this point\n      } else {\n        selectedItemsSetUtilities.add(row)\n      }\n      // This is where range is different, due to the difference in shift\n    } else if (shiftClicked) {\n      const lastSelectedItem = [...selectedItemsToSet.value].pop()\n      const lastSelectedIndex = computedItems.value.findIndex((i) => i === lastSelectedItem)\n      const selectStartIndex = Math.min(lastSelectedIndex, index)\n      const selectEndIndex = Math.max(lastSelectedIndex, index)\n      const items = computedItems.value.slice(selectStartIndex, selectEndIndex + 1)\n      selectedItemsSetUtilities.set(items)\n      // If nothing is being held, then we just behave like it's single mode\n    } else {\n      selectedItemsSetUtilities.set([row])\n    }\n  }\n}\n\nconst onRowClick = (row: Items, index: number, e: MouseEvent) => {\n  if (props.noSelectOnClick === false) {\n    handleRowSelection(row, index, e.shiftKey, e.ctrlKey, e.metaKey)\n  }\n  emit('row-clicked', row, index, e)\n}\n\nconst handleFieldSorting = (field: TableField<Items>) => {\n  if (!isSortable.value) return\n\n  const fieldKey = typeof field === 'object' && field !== null ? field.key : field\n  const fieldSortable = typeof field === 'object' && field !== null ? field.sortable : false\n\n  if (!(isSortable.value === true && fieldSortable === true)) return\n\n  const resolveOrder = (val: BTableSortByOrder): BTableSortByOrder | undefined => {\n    if (val === 'asc') return 'desc'\n    if (val === undefined) return 'asc'\n    if (\n      props.mustSort === true ||\n      (Array.isArray(props.mustSort) && props.mustSort.includes(fieldKey as string))\n    )\n      return 'asc'\n    return undefined\n  }\n\n  const index = sortByModel.value?.findIndex((el) => el.key === fieldKey) ?? -1\n  const originalValue = sortByModel.value?.[index]\n  const updatedValue: BTableSortBy =\n    // If value is new, we default to ascending\n    // Otherwise we make a temp copy of the value\n    index === -1 || !originalValue ? {key: fieldKey as string, order: 'asc'} : {...originalValue}\n\n  /**\n   * @returns the updated value to emit for sorted\n   */\n  const handleMultiSort = (): BTableSortBy => {\n    let val = updatedValue\n    if (index === -1) {\n      sortByModel.value = [...(sortByModel.value ?? []), updatedValue]\n    } else {\n      const order = resolveOrder(updatedValue.order)\n      val = {...updatedValue, order}\n      sortByModel.value = order\n        ? sortByModel.value?.map((el) => (el.key === val.key ? val : el))\n        : sortByModel.value?.filter((el) => el.key !== val.key)\n    }\n    return val\n  }\n\n  /**\n   * @returns the updated value to emit for sorted\n   */\n  const handleSingleSort = (): BTableSortBy => {\n    const val = {\n      ...updatedValue,\n      order: index === -1 ? updatedValue.order : resolveOrder(updatedValue.order),\n    }\n    sortByModel.value = [val]\n    return val\n  }\n\n  // Then emit the returned updated value\n  emit('sorted', props.multisort === true ? handleMultiSort() : handleSingleSort())\n}\n\nconst onFieldHeadClick = (\n  fieldKey: string,\n  field: TableField<Items>,\n  event: Readonly<MouseEvent>,\n  isFooter = false\n) => {\n  emit('head-clicked', fieldKey, field, event, isFooter)\n  handleFieldSorting(field)\n}\n\nconst callItemsProvider = async () => {\n  if (!usesProvider.value || props.provider === undefined || busyModel.value) return\n  busyModel.value = true\n  const response = props.provider({\n    currentPage: currentPageNumber.value,\n    filter: props.filter,\n    sortBy: sortByModel.value,\n    perPage: perPageNumber.value,\n  })\n  try {\n    const items = response instanceof Promise ? await response : response\n\n    if (items === undefined) return\n    internalItems.value = items\n  } finally {\n    // Potential race condition could occur if the user explicitly sets the busy value to a different value while the response promise is executing\n    // which would have been the users choice.\n    // eslint-disable-next-line require-atomic-updates\n    busyModel.value = false\n  }\n}\n\nconst providerPropsWatch = async (prop: string, val: unknown, oldVal: unknown) => {\n  if (val === oldVal) return\n\n  //stop provide when paging\n  const inNoProvider = (key: NoProviderTypes) => props.noProvider?.includes(key) === true\n  const noProvideWhenPaging =\n    (prop === 'currentPage' || prop === 'perPage') &&\n    (inNoProvider('paging') || props.noProviderPaging === true)\n  const noProvideWhenFiltering =\n    prop === 'filter' && (inNoProvider('filtering') || props.noProviderFiltering === true)\n  const noProvideWhenSorting =\n    (prop === 'sortBy' || prop === 'sortDesc') &&\n    (inNoProvider('sorting') || props.noProviderSorting === true)\n\n  if (noProvideWhenPaging || noProvideWhenFiltering || noProvideWhenSorting) return\n\n  if (usesProvider.value === true) {\n    await callItemsProvider()\n  }\n\n  if (!(prop === 'currentPage' || prop === 'perPage')) {\n    emit('filtered', [...computedItems.value])\n  }\n}\n\nwatch(\n  () => props.filter,\n  (filter, oldFilter) => {\n    providerPropsWatch('filter', filter, oldFilter)\n\n    if (filter === oldFilter || usesProvider.value) return\n    if (!filter) {\n      emit('filtered', [...computedItems.value])\n    }\n  }\n)\nwatch(currentPageNumber, (val, oldVal) => {\n  providerPropsWatch('currentPage', val, oldVal)\n})\nwatch(perPageNumber, (val, oldVal) => {\n  providerPropsWatch('perPage', val, oldVal)\n})\nwatch(\n  sortByModel,\n  (val, oldVal) => {\n    providerPropsWatch('sortBy', val, oldVal)\n  },\n  {deep: true}\n)\n\nwatch(\n  () => props.provider,\n  (newValue) => {\n    // Reset the internal values if the provider stops getting used\n    if (newValue === undefined) {\n      internalItems.value = []\n      return\n    }\n    // Otherwise we should refresh the table on such a change\n    callItemsProvider()\n  }\n)\n\nonMounted(callItemsProvider)\n\nconst exposedSelectableUtilities = {\n  clearSelected: () => {\n    if (!props.selectable) return\n    selectedItemsSetUtilities.clear()\n  },\n  selectAllRows: () => {\n    if (!props.selectable) return\n    selectedItemsToSet.value = new Set([...computedItems.value])\n  },\n  selectRow: (index: number) => {\n    if (!props.selectable) return\n    const item = computedItems.value[index]\n    if (!item || selectedItemsSetUtilities.has(item)) return\n    selectedItemsSetUtilities.add(item)\n  },\n  unselectRow: (index: number) => {\n    if (!props.selectable) return\n    const item = computedItems.value[index]\n    if (!item || !selectedItemsSetUtilities.has(item)) return\n    selectedItemsSetUtilities.delete(item)\n  },\n  isRowSelected: (index: number) => {\n    if (!props.selectable) return false\n    const item = computedItems.value[index]\n    return selectedItemsSetUtilities.has(item)\n  },\n} as const\n\ndefineExpose({\n  // The row selection methods are really for compat. Users should probably use the v-model though\n  ...exposedSelectableUtilities,\n  refresh: callItemsProvider,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}