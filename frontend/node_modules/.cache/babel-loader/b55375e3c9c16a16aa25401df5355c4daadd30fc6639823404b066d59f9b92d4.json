{"ast":null,"code":"import { ref, inject, onMounted, onActivated, nextTick } from \"vue\";\nimport { u as useAriaInvalid } from \"./useAriaInvalid-BTUbGj3Y.mjs\";\nimport { u as useId } from \"./useId-BR0P33VS.mjs\";\nimport { c as useFocus } from \"./index-BgXbxfV9.mjs\";\nimport { j as formGroupPluginKey } from \"./keys-CsqIkltC.mjs\";\nimport { u as useToNumber, l as useDebounceFn } from \"./index-dpbv1toz.mjs\";\nconst normalizeInput = (v, modelModifiers) => {\n  if (v === null) return;\n  let update = v;\n  if (modelModifiers.number && typeof update === \"string\" && update !== \"\") {\n    const parsed = Number.parseFloat(update);\n    update = Number.isNaN(parsed) ? update : parsed;\n  }\n  return update;\n};\nconst useFormInput = (props, input, modelValue, modelModifiers) => {\n  var _a;\n  const forceUpdateKey = ref(0);\n  const computedId = useId(() => props.id, \"input\");\n  const debounceNumber = useToNumber(() => props.debounce ?? 0);\n  const debounceMaxWaitNumber = useToNumber(() => props.debounceMaxWait ?? NaN);\n  (_a = inject(formGroupPluginKey, null)) == null ? void 0 : _a(computedId);\n  const internalUpdateModelValue = useDebounceFn(value => {\n    modelValue.value = value;\n  }, () => modelModifiers.lazy === true ? 0 : debounceNumber.value, {\n    maxWait: () => modelModifiers.lazy === true ? NaN : debounceMaxWaitNumber.value\n  });\n  const updateModelValue = (value, force = false) => {\n    if (modelModifiers.lazy === true && force === false) return;\n    internalUpdateModelValue(value);\n  };\n  const {\n    focused\n  } = useFocus(input, {\n    initialValue: props.autofocus\n  });\n  const _formatValue = (value, evt, force = false) => {\n    if (props.formatter !== void 0 && (!props.lazyFormatter || force)) {\n      return props.formatter(value, evt);\n    }\n    return value;\n  };\n  onMounted(() => {\n    var _a2;\n    if (input.value) {\n      input.value.value = ((_a2 = modelValue.value) == null ? void 0 : _a2.toString()) ?? \"\";\n    }\n  });\n  onActivated(() => {\n    nextTick(() => {\n      if (props.autofocus) {\n        focused.value = true;\n      }\n    });\n  });\n  const computedAriaInvalid = useAriaInvalid(() => props.ariaInvalid, () => props.state);\n  const onInput = evt => {\n    const {\n      value\n    } = evt.target;\n    const formattedValue = _formatValue(value, evt);\n    if (evt.defaultPrevented) {\n      evt.preventDefault();\n      return;\n    }\n    const nextModel = formattedValue;\n    updateModelValue(nextModel);\n  };\n  const onChange = evt => {\n    const {\n      value\n    } = evt.target;\n    const formattedValue = _formatValue(value, evt);\n    if (evt.defaultPrevented) {\n      evt.preventDefault();\n      return;\n    }\n    const nextModel = formattedValue;\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true);\n    }\n  };\n  const onBlur = evt => {\n    if (!modelModifiers.lazy && !props.lazyFormatter && !modelModifiers.trim) return;\n    const {\n      value\n    } = evt.target;\n    const formattedValue = _formatValue(value, evt, true);\n    const nextModel = modelModifiers.trim ? formattedValue.trim() : formattedValue;\n    const needsForceUpdate = nextModel.length !== formattedValue.length;\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true);\n    }\n    if (modelModifiers.trim && needsForceUpdate) {\n      forceUpdateKey.value = forceUpdateKey.value + 1;\n    }\n  };\n  const focus = () => {\n    if (!props.disabled) {\n      focused.value = true;\n    }\n  };\n  const blur = () => {\n    if (!props.disabled) {\n      focused.value = false;\n    }\n  };\n  return {\n    input,\n    computedId,\n    computedAriaInvalid,\n    onInput,\n    onChange,\n    onBlur,\n    focus,\n    blur,\n    forceUpdateKey\n  };\n};\nexport { normalizeInput as n, useFormInput as u };","map":{"version":3,"names":["normalizeInput","v","modelModifiers","update","number","parsed","Number","parseFloat","isNaN","useFormInput","props","input","modelValue","forceUpdateKey","ref","computedId","useId","id","debounceNumber","useToNumber","debounce","debounceMaxWaitNumber","debounceMaxWait","NaN","_a","inject","formGroupPluginKey","internalUpdateModelValue","useDebounceFn","value","lazy","maxWait","updateModelValue","force","focused","useFocus","initialValue","autofocus","_formatValue","evt","formatter","lazyFormatter","onMounted","_a2","toString","onActivated","nextTick","computedAriaInvalid","useAriaInvalid","ariaInvalid","state","onInput","target","formattedValue","defaultPrevented","preventDefault","nextModel","onChange","onBlur","trim","needsForceUpdate","length","focus","disabled","blur"],"sources":["../src/utils/normalizeInput.ts","../src/composables/useFormInput.ts"],"sourcesContent":["import type {Numberish} from '../types/CommonTypes'\n\nexport const normalizeInput = (\n  v: Numberish | null,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  if (v === null) return\n  let update = v\n  if (modelModifiers.number && typeof update === 'string' && update !== '') {\n    const parsed = Number.parseFloat(update)\n    update = Number.isNaN(parsed) ? update : parsed\n  }\n  return update\n}\n","import type {Numberish} from '../types/CommonTypes'\nimport {inject, nextTick, onActivated, onMounted, ref, type Ref, type ShallowRef} from 'vue'\nimport {useAriaInvalid} from './useAriaInvalid'\nimport {useId} from './useId'\nimport {useDebounceFn, useFocus, useToNumber} from '@vueuse/core'\nimport type {CommonInputProps} from '../types/FormCommonInputProps'\nimport {formGroupPluginKey} from '../utils/keys'\n\nexport const useFormInput = (\n  props: Readonly<CommonInputProps>,\n  input:\n    | Readonly<ShallowRef<HTMLInputElement | null>>\n    | Readonly<ShallowRef<HTMLTextAreaElement | null>>,\n  modelValue: Ref<Numberish | null>,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  const forceUpdateKey = ref(0)\n\n  const computedId = useId(() => props.id, 'input')\n  const debounceNumber = useToNumber(() => props.debounce ?? 0)\n  const debounceMaxWaitNumber = useToNumber(() => props.debounceMaxWait ?? NaN)\n\n  // This automatically adds the appropriate \"for\" attribute to a BFormGroup label\n  inject(formGroupPluginKey, null)?.(computedId)\n\n  const internalUpdateModelValue = useDebounceFn(\n    (value: Numberish) => {\n      modelValue.value = value\n    },\n    () => (modelModifiers.lazy === true ? 0 : debounceNumber.value),\n    {maxWait: () => (modelModifiers.lazy === true ? NaN : debounceMaxWaitNumber.value)}\n  )\n\n  const updateModelValue = (value: Numberish, force = false) => {\n    if (modelModifiers.lazy === true && force === false) return\n    internalUpdateModelValue(value)\n  }\n\n  const {focused} = useFocus(input, {\n    initialValue: props.autofocus,\n  })\n\n  const _formatValue = (value: string, evt: Readonly<Event>, force = false) => {\n    if (props.formatter !== undefined && (!props.lazyFormatter || force)) {\n      return props.formatter(value, evt)\n    }\n    return value\n  }\n  onMounted(() => {\n    if (input.value) {\n      input.value.value = modelValue.value?.toString() ?? ''\n    }\n  })\n\n  onActivated(() => {\n    nextTick(() => {\n      if (props.autofocus) {\n        focused.value = true\n      }\n    })\n  })\n\n  const computedAriaInvalid = useAriaInvalid(\n    () => props.ariaInvalid,\n    () => props.state\n  )\n\n  const onInput = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n\n    updateModelValue(nextModel)\n  }\n\n  const onChange = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n  }\n\n  const onBlur = (evt: Readonly<FocusEvent>) => {\n    if (!modelModifiers.lazy && !props.lazyFormatter && !modelModifiers.trim) return\n\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt, true)\n\n    const nextModel = modelModifiers.trim ? formattedValue.trim() : formattedValue\n    const needsForceUpdate = nextModel.length !== formattedValue.length\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n    if (modelModifiers.trim && needsForceUpdate) {\n      // The value is trimmed but there would still exist some white space\n      // So, force update the value. You need to bind this to :key on the input element\n      forceUpdateKey.value = forceUpdateKey.value + 1\n    }\n  }\n\n  const focus = () => {\n    if (!props.disabled) {\n      focused.value = true\n    }\n  }\n\n  const blur = () => {\n    if (!props.disabled) {\n      focused.value = false\n    }\n  }\n\n  return {\n    input,\n    computedId,\n    computedAriaInvalid,\n    onInput,\n    onChange,\n    onBlur,\n    focus,\n    blur,\n    forceUpdateKey,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}